{"cells":[{"cell_type":"markdown","id":"5ae369d0-fb59-4e77-a928-a6417de1a666","metadata":{"id":"5ae369d0-fb59-4e77-a928-a6417de1a666"},"source":["# Mentoria: Monitoreo de Espacios Verdes\n","\n","__DIPLODATOS 2022 - FAMAF UNC__\n","\n","_Felix Rojo Lapalma_\n","\n","## Aprendizaje Supervisado\n","\n","En esta etapa ya hemos avanzado en\n","\n","- [TP-Analisis-Visualizacion](https://github.com/felixlapalma/monitoreo-espacios-verdes-diplo202X/blob/main/notebooks-tp/Analisis-y-Visualizacion-MEV-TP.ipynb):\n","\n","  - análisis y exploración del conjunto de datos (aunque sea superficialmente)\n","  - set representativo: Es decir, aprendimos que podemos llegar a trabajar con un set mas reducido (de las caracteristicas - columnas del dataframe) e igualmente vamos a estar representando gran parte del conjunto.\n","  - inputacion de valores:   \n","    - tenemos formas de inputar valores en rangos temporales que no tenemos (para una cierta zona) utilizando otros rangos temporales (aqui aprovechamos fuertemente la estacionalidad de lo que estamos monitoreando)\n","    - que un outlier en un rango temporal puede ser un valor nominal en otro rango temporal.\n","  - etc\n","\n","- [TP-Exploracion-y-Curación](https://drive.google.com/file/d/1-E0ijX7LTRczoAwYG7eAyfDb5PElyEfi/view?usp=sharing):\n","\n"," - \"Curación\" de nuestro dataset con diferentes recetas. Por curar nos referimos a generar los procesos necesarios (trazables y reproducibles) que nos lleven del conjunto original de datos (que debe permanecer inmutable) hasta un conjunto que pueda ser consumido por distintos algorimos de aprendizaje. Entre ellos:\n","    - filtrado\n","    - imputacion de valores\n","    - etc\n","\n","Es decir en esta instancia ya contamos con las recetas o procesos que nos permiten, partiendo del set de datos crudos pasar a un dataset listo para ser consumidos por los modelos de aprendizaje supervisado que seleccionemos.\n"," \n","### Fuentes\n","\n","El presente trabajo práctico está inspirado en los correspondientes de:\n","\n","- [jbergamasco2019](https://github.com/jbergamasco/DiploDatos2019)\n","\n","- [TP-Analisis-Visualizacion](https://github.com/felixlapalma/monitoreo-espacios-verdes-diplo202X/blob/main/notebooks-tp/Analisis-y-Visualizacion-MEV-TP.ipynb)\n","\n","- [TP-Exploracion-y-Curación](https://drive.google.com/file/d/1-E0ijX7LTRczoAwYG7eAyfDb5PElyEfi/view?usp=sharing)\n","\n","## Sobre el Trabajo Requerido\n","\n","En este trabajo proponemos  explorar y aplicar lo aprendido en el curso (Aprendizaje Supervisado) integrandolo con lo desarrollado en los prácticos de Análisis y visualización y el correspondiente a Exploración y Curación de datos.\n","\n","### Conceptual\n","\n","Algunas de las preguntas que deberemos responder (avanzando en el TP):\n","\n","- ¿Cual seria el problema que pretendemos resolver utilizando Aprendizaje Supervisado? ¿Es un problema de clasificación o de regresion? Que distingue a uno de otro?\n","\n","- ¿Es suficiente un solo modelo? ¿Que tan importante es la parte temporal? ¿Necesitamos que sea estacional?\n","\n","- ¿Es necesario utilizar todas las bandas del raster o con ciertos indices es suficiente? (Esto ya lo respondio parcialmente en las TPs anteriores)\n","\n","- ¿Podríamos utilizar los modelos para detectar alguna clase de anomalía en el comportamiento de una dada región? ¿Como? \n","\n","- ¿Piensa que podriamos utilizar el enfoque actual (OBIA- Object-based Image Analysis) para clasificar a nivel de pixel? ¿Que deberiamos suponer o asumir para que esto sea valido?*\n","\n","*_Comentario_: _Si bien no lo mencionamos en forma explicita la forma de seleccionar y computar las diferentes propiedades en los rasters para la creacion del dataset implico el acceso a nivel de objetos o zonas. No se realizo un analisis de pixel sino a nivel de un \"conjunto\" de pixeles._\n","\n","### Hands-on\n","\n","A nivel de implementacion vamos a requerir la aplicación de diferentes modelos sobre el conjunto de datos (al menos 2 de ellos):\n","\n","- [ExtraTreeClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.tree.ExtraTreeClassifier.html#sklearn.tree.ExtraTreeClassifier)\n","- [RandomForestClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html?highlight=random%20forest#sklearn.ensemble.RandomForestClassifier)\n","- [XGBoost](https://xgboost.readthedocs.io/en/stable/)\n","\n","#### Pasos\n","\n","1. Descarga del Set de Datos$^1$\n","2. Curacion (Recetas TP Exploración y Curación)\n","3. Generacion de Features Extras$^2$\n","4. Split Dataset\n","5. Entrenamiento del Modelo\n","  - [a] Grid Search\n","  - [b] tunning de Hiperparametros\n","6. Presentacion de Resultados y Metricas\n","\n","\n","### Que Presentar?\n","\n","Set de Notebooks en los cuales se apliquen 2 modelos al menos de los mencionados junto al menos 3 de las recetas generadas en el TP de Exploracion y Curación. Para ello puede seguir los pasos del step anterior. \n","En el curso del TP debemos poder responder (adicionalmente):\n","- ¿Que receta parece otorgar el mejor ratio de costo/beneficio? Respecto a este punto considere que muchas veces el mayor \"accuracy\" (por solo nombrar una metrica) no significa el mayor beneficio. Esto se puede entender si consideramos que un modelo no se reduce solo a su inferencia, sino a todos lo pasos que nos permiten llevarla adelante.\n","- Respecto a los modelos, para los `Trees` es necesario normalizar los datos? y para `XGB`?\n","- Intuitivamente uno pensaria que los clasificadores deberian andar mejor en los espacios mas grandes (o de mayor area). Tiene alguna forma de corroborar o refutar esta idea?\n","\n","- Si el modelo fuera utilizado para identificar anómalias en espacios verdes,sobre que preferiria tener mayor efectividad? (el conocido dilema ¿Precision o Recall?) Es decir que proporcion de los espacios verdes identificados como sanos estaban sanos? (Precision) o que proporcion de los espacios verdes actualmente sanos, fueron identificados como tales? (Recall)\n","Como ayuda piense las implicancias (mas allá del espacio verde en si) de marcar siempre en falta algun sitio (logistica, transporte, etc).\n","\n","\n","$^1$ Para esta etapa hemos adicionado al set de datos originales un set de [espacios \"no-verdes\"](https://github.com/felixlapalma/monitoreo-espacios-verdes-diplo202X/blob/main/data/ab-initio-dataset-build.md#espacios-no-verdes-o-indefinidos). Esto con el fin de tener un esquema claro de separacion \"verde/No-verde\" para ayudarlo en el entrenamiento de su sistema. \n","Para poder utilizarlo le recomendamos que lo procese en forma similar al dataset original (puede utilizar las mismas recetas). Una vez procesado cada uno por su cuenta y con los label correspondientes, puede unificar los datasets en uno único. Puede consultar [estructura-datos](https://github.com/felixlapalma/monitoreo-espacios-verdes-diplo202X/blob/main/data/estructura-datos.md) para ver las diferencias (minimas) entre los datasets.\n","\n","$^2$ Respecto al paso 3, mencionamos que puede ser necesario la generacion adicional de algun feature extra a posteriori de la receta (esto podria incorporarse en la receta si se considera beneficioso). Recuerde que los procesos de Ciencia de Datos son altamente no lineales y de iteracion continua (al menos en su fase inicial). Particualarmente la generacion de features relacionados a fechas, meses, estaciones, DOY (day of year) o WOY (weak of year) pueden resultarle util para responder algunas de las preguntas conceptuales.\n","\n","__EXTRA__: Set de pasos descriptivos que seguiria para poder implementar/responder la ultima de las preguntas conceptuales (OBIA vs PBIA- pixel based image analysis).\n","\n","__EXTRA$^2$__: Implementación en codigo de __EXTRA__ \n","\n","\n","Cada una de las notebooks tiene que tener la secuencia propuesta (o variaciones debidamente justificadas). Con las metricas utilizadas, matrices de confusion, etc. Se valorará analisis de tradeoff (o costo beneficio) entre los modelos y las recetas utilizadas.\n"]},{"cell_type":"markdown","source":["Resolución: \n","\n","El análisis de imágenes basado en objetos (OBIA) implica que los píxeles se agrupen primero en objetos según la similitud espectral o una variable externa, como la propiedad, el suelo o la unidad geológica.\n","\n","Un enfoque de análisis de imágenes basado en objetos (OBIA) para la clasificación de imágenes segmenta una imagen en regiones espectrales homogéneas.\n","\n","Esto difiere de los métodos estándar de análisis de imágenes que clasifican cada píxel de forma aislada; el enfoque OBIA generalmente produce un producto de mapa más limpio, más significativo para los usuarios humanos.\n","\n","https://geotecnologias.wordpress.com/2010/08/19/classificacao-orientada-a-objeto-consideracoes/\n"],"metadata":{"id":"AivTF04-vxpT"},"id":"AivTF04-vxpT"},{"cell_type":"markdown","source":[" 1. Descarga del Set de Datos\n","\n","\n"],"metadata":{"id":"majQkVdwYyf9"},"id":"majQkVdwYyf9"},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as pltb"],"metadata":{"id":"Nll_aV4dZnG2"},"id":"Nll_aV4dZnG2","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"0a543c19-bc55-4bc3-a241-2a2395cae3cf","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0a543c19-bc55-4bc3-a241-2a2395cae3cf","outputId":"c29624d5-9ec8-4033-d4d5-18fe369cc3ef","executionInfo":{"status":"ok","timestamp":1659225149777,"user_tz":180,"elapsed":16727,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Running on CoLab\n","Downloading...\n","From: https://drive.google.com/uc?id=1tgbIQaEXzIghcFYyd2YM9iMho4TDHHFd\n","To: /content/espacios-verdes-indexs-cba-20170101-20220420.zip\n","100% 170M/170M [00:00<00:00, 226MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=1mfir4DZxT3g9tQkPJzCAZYy2VS2VHp7O\n","To: /content/espacios-NO-verdes-indexs-cba-20170101-20220420.zip\n","100% 78.7M/78.7M [00:00<00:00, 216MB/s]\n"]}],"source":["if 'google.colab' in str(get_ipython()):\n","    print('Running on CoLab')\n","    # running on colab\n","    # from link @ https://github.com/felixlapalma/monitoreo-espacios-verdes-diplo202X/blob/main/data/ab-initio-dataset-build.md\n","    !gdown https://drive.google.com/file/d/1tgbIQaEXzIghcFYyd2YM9iMho4TDHHFd/view?usp=sharing --fuzzy\n","    !gdown https://drive.google.com/file/d/1mfir4DZxT3g9tQkPJzCAZYy2VS2VHp7O/view?usp=sharing --fuzzy\n","    # Notar el cambio del path y el tipo de archivo (no lo descomprimimos)\n","    df_verde=pd.read_csv('/content/espacios-verdes-indexs-cba-20170101-20220420.zip',index_col=0)\n","    df_no_verde=pd.read_csv('/content/espacios-NO-verdes-indexs-cba-20170101-20220420.zip',index_col=0)\n","else:\n","    # recuerde descargar el dataset desde los links mencionados en el README\n","    df_verde=pd.read_csv('../data/cba/espacios-verdes-indexs-cba-20170101-20220420.csv',index_col=0)\n","    df_no_verde=pd.read_csv('/data/cba/espacios-NO-verdes-indexs-cba-20170101-20220420.csv',index_col=0)"]},{"cell_type":"code","execution_count":null,"id":"39bc292e-2922-4ce9-8870-d838f46f9f7c","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"39bc292e-2922-4ce9-8870-d838f46f9f7c","outputId":"6e2b1f69-2464-404a-fac0-a0b665180026","executionInfo":{"status":"ok","timestamp":1659225149808,"user_tz":180,"elapsed":90,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   B02_min  B02_max  B02_mean  B02_median  B02_nodata  B02_range  B02_count  \\\n","0   0.0871   0.1421  0.102570     0.09650         0.0     0.0550         47   \n","1   0.0970   0.1936  0.118354     0.10660         0.0     0.0966         13   \n","2   0.0992   0.1273  0.111805     0.11290         0.0     0.0281         19   \n","3   0.0995   0.1933  0.118491     0.11355         0.0     0.0938         66   \n","4   0.1059   0.1385  0.122453     0.12240         0.0     0.0326         47   \n","\n","   B03_min  B03_max  B03_mean  ...  sipi_median  sipi_nodata  sipi_range  \\\n","0   0.0768   0.1516  0.098885  ...     0.884216          0.0    0.453065   \n","1   0.1006   0.1949  0.122154  ...     0.971875          0.0    0.247045   \n","2   0.1037   0.1369  0.117795  ...     0.973017          0.0    0.207006   \n","3   0.0993   0.1990  0.124512  ...     0.966202          0.0    0.258424   \n","4   0.1036   0.1580  0.132455  ...     0.993986          0.0    0.260419   \n","\n","   sipi_count                                             raster  \\\n","0          47  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","1          13  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","2          19  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","3          66  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","4          47  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","\n","   clouds_on_raster     osm_id  name      area_m2        date  \n","0               0.0  605976736   NaN  4650.710032  2017-01-03  \n","1               0.0  559322368   NaN  1502.000513  2017-01-03  \n","2               0.0  559322369   NaN  2004.192528  2017-01-03  \n","3               0.0  559328111   NaN  6940.507640  2017-01-03  \n","4               0.0  559328112   NaN  4587.356048  2017-01-03  \n","\n","[5 rows x 167 columns]"],"text/html":["\n","  <div id=\"df-7f9bbf95-d9e7-49c4-bce2-7f3e1a976eff\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>B02_min</th>\n","      <th>B02_max</th>\n","      <th>B02_mean</th>\n","      <th>B02_median</th>\n","      <th>B02_nodata</th>\n","      <th>B02_range</th>\n","      <th>B02_count</th>\n","      <th>B03_min</th>\n","      <th>B03_max</th>\n","      <th>B03_mean</th>\n","      <th>...</th>\n","      <th>sipi_median</th>\n","      <th>sipi_nodata</th>\n","      <th>sipi_range</th>\n","      <th>sipi_count</th>\n","      <th>raster</th>\n","      <th>clouds_on_raster</th>\n","      <th>osm_id</th>\n","      <th>name</th>\n","      <th>area_m2</th>\n","      <th>date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0871</td>\n","      <td>0.1421</td>\n","      <td>0.102570</td>\n","      <td>0.09650</td>\n","      <td>0.0</td>\n","      <td>0.0550</td>\n","      <td>47</td>\n","      <td>0.0768</td>\n","      <td>0.1516</td>\n","      <td>0.098885</td>\n","      <td>...</td>\n","      <td>0.884216</td>\n","      <td>0.0</td>\n","      <td>0.453065</td>\n","      <td>47</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>605976736</td>\n","      <td>NaN</td>\n","      <td>4650.710032</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0970</td>\n","      <td>0.1936</td>\n","      <td>0.118354</td>\n","      <td>0.10660</td>\n","      <td>0.0</td>\n","      <td>0.0966</td>\n","      <td>13</td>\n","      <td>0.1006</td>\n","      <td>0.1949</td>\n","      <td>0.122154</td>\n","      <td>...</td>\n","      <td>0.971875</td>\n","      <td>0.0</td>\n","      <td>0.247045</td>\n","      <td>13</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559322368</td>\n","      <td>NaN</td>\n","      <td>1502.000513</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0992</td>\n","      <td>0.1273</td>\n","      <td>0.111805</td>\n","      <td>0.11290</td>\n","      <td>0.0</td>\n","      <td>0.0281</td>\n","      <td>19</td>\n","      <td>0.1037</td>\n","      <td>0.1369</td>\n","      <td>0.117795</td>\n","      <td>...</td>\n","      <td>0.973017</td>\n","      <td>0.0</td>\n","      <td>0.207006</td>\n","      <td>19</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559322369</td>\n","      <td>NaN</td>\n","      <td>2004.192528</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0995</td>\n","      <td>0.1933</td>\n","      <td>0.118491</td>\n","      <td>0.11355</td>\n","      <td>0.0</td>\n","      <td>0.0938</td>\n","      <td>66</td>\n","      <td>0.0993</td>\n","      <td>0.1990</td>\n","      <td>0.124512</td>\n","      <td>...</td>\n","      <td>0.966202</td>\n","      <td>0.0</td>\n","      <td>0.258424</td>\n","      <td>66</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559328111</td>\n","      <td>NaN</td>\n","      <td>6940.507640</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.1059</td>\n","      <td>0.1385</td>\n","      <td>0.122453</td>\n","      <td>0.12240</td>\n","      <td>0.0</td>\n","      <td>0.0326</td>\n","      <td>47</td>\n","      <td>0.1036</td>\n","      <td>0.1580</td>\n","      <td>0.132455</td>\n","      <td>...</td>\n","      <td>0.993986</td>\n","      <td>0.0</td>\n","      <td>0.260419</td>\n","      <td>47</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559328112</td>\n","      <td>NaN</td>\n","      <td>4587.356048</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 167 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f9bbf95-d9e7-49c4-bce2-7f3e1a976eff')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7f9bbf95-d9e7-49c4-bce2-7f3e1a976eff button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7f9bbf95-d9e7-49c4-bce2-7f3e1a976eff');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}],"source":["df_verde.head()"]},{"cell_type":"code","source":["df_verde.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pakab-G5XQyn","executionInfo":{"status":"ok","timestamp":1659225149809,"user_tz":180,"elapsed":70,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"affea9c0-8c8f-4452-b706-b093c8460700"},"id":"Pakab-G5XQyn","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(208932, 167)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df_no_verde.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sN7HTqUaXSXO","executionInfo":{"status":"ok","timestamp":1659225149810,"user_tz":180,"elapsed":64,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"e89c77f5-bef8-4bd9-fcd8-0f35424c35d1"},"id":"sN7HTqUaXSXO","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(96600, 168)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df_no_verde.head()"],"metadata":{"id":"XHiCZAe_AdFZ","colab":{"base_uri":"https://localhost:8080/","height":456},"outputId":"985ccd23-71b3-4357-cbeb-afcfc95a8712","executionInfo":{"status":"ok","timestamp":1659225149811,"user_tz":180,"elapsed":55,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}}},"id":"XHiCZAe_AdFZ","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   B02_min  B02_max  B02_mean  B02_median  B02_nodata  B02_range  B02_count  \\\n","0   0.0894   0.3261  0.165313     0.15350         0.0     0.2367        313   \n","1   0.0950   0.5436  0.166934     0.14690         0.0     0.4486        317   \n","2   0.0867   0.3236  0.163555     0.15535         0.0     0.2369        314   \n","3   0.0874   0.3107  0.134499     0.13110         0.0     0.2233        315   \n","4   0.0826   0.2872  0.127382     0.11620         0.0     0.2046        313   \n","\n","   B03_min  B03_max  B03_mean  ...  sipi_nodata  sipi_range  sipi_count  \\\n","0   0.0827   0.3737  0.168369  ...          0.0   88.165550         313   \n","1   0.0927   0.5340  0.170916  ...          0.0   69.959171         317   \n","2   0.0807   0.3693  0.164975  ...          0.0   52.476419         314   \n","3   0.0776   0.3101  0.132847  ...          0.0   35.171722         315   \n","4   0.0722   0.3367  0.124013  ...          0.0    1.484326         313   \n","\n","                                              raster  clouds_on_raster  \\\n","0  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","1  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","2  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","3  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","4  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","\n","    osm_id       name       area_m2               desc        date  \n","0  259-nev  undefined  31365.484905             Barrio  2017-01-03  \n","1  237-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03  \n","2  236-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03  \n","3  235-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03  \n","4  234-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03  \n","\n","[5 rows x 168 columns]"],"text/html":["\n","  <div id=\"df-ea189be4-f3c5-42df-b82e-281f737f2377\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>B02_min</th>\n","      <th>B02_max</th>\n","      <th>B02_mean</th>\n","      <th>B02_median</th>\n","      <th>B02_nodata</th>\n","      <th>B02_range</th>\n","      <th>B02_count</th>\n","      <th>B03_min</th>\n","      <th>B03_max</th>\n","      <th>B03_mean</th>\n","      <th>...</th>\n","      <th>sipi_nodata</th>\n","      <th>sipi_range</th>\n","      <th>sipi_count</th>\n","      <th>raster</th>\n","      <th>clouds_on_raster</th>\n","      <th>osm_id</th>\n","      <th>name</th>\n","      <th>area_m2</th>\n","      <th>desc</th>\n","      <th>date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0894</td>\n","      <td>0.3261</td>\n","      <td>0.165313</td>\n","      <td>0.15350</td>\n","      <td>0.0</td>\n","      <td>0.2367</td>\n","      <td>313</td>\n","      <td>0.0827</td>\n","      <td>0.3737</td>\n","      <td>0.168369</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>88.165550</td>\n","      <td>313</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>259-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0950</td>\n","      <td>0.5436</td>\n","      <td>0.166934</td>\n","      <td>0.14690</td>\n","      <td>0.0</td>\n","      <td>0.4486</td>\n","      <td>317</td>\n","      <td>0.0927</td>\n","      <td>0.5340</td>\n","      <td>0.170916</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>69.959171</td>\n","      <td>317</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>237-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0867</td>\n","      <td>0.3236</td>\n","      <td>0.163555</td>\n","      <td>0.15535</td>\n","      <td>0.0</td>\n","      <td>0.2369</td>\n","      <td>314</td>\n","      <td>0.0807</td>\n","      <td>0.3693</td>\n","      <td>0.164975</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>52.476419</td>\n","      <td>314</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>236-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0874</td>\n","      <td>0.3107</td>\n","      <td>0.134499</td>\n","      <td>0.13110</td>\n","      <td>0.0</td>\n","      <td>0.2233</td>\n","      <td>315</td>\n","      <td>0.0776</td>\n","      <td>0.3101</td>\n","      <td>0.132847</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>35.171722</td>\n","      <td>315</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>235-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0826</td>\n","      <td>0.2872</td>\n","      <td>0.127382</td>\n","      <td>0.11620</td>\n","      <td>0.0</td>\n","      <td>0.2046</td>\n","      <td>313</td>\n","      <td>0.0722</td>\n","      <td>0.3367</td>\n","      <td>0.124013</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>1.484326</td>\n","      <td>313</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>234-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 168 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea189be4-f3c5-42df-b82e-281f737f2377')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ea189be4-f3c5-42df-b82e-281f737f2377 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ea189be4-f3c5-42df-b82e-281f737f2377');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["round(df_verde.describe(),2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":393},"id":"11LE5IbzV8V9","executionInfo":{"status":"ok","timestamp":1659225152391,"user_tz":180,"elapsed":2631,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"de37f182-477b-4365-cce3-8d8f0938adc1"},"id":"11LE5IbzV8V9","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         B02_min    B02_max   B02_mean  B02_median  B02_nodata  B02_range  \\\n","count  167269.00  167269.00  167269.00   167269.00   208932.00  167269.00   \n","mean        0.11       0.17       0.13        0.13       25.19       0.06   \n","std         0.03       0.05       0.03        0.04      341.30       0.04   \n","min         0.00       0.07       0.06        0.06        0.00       0.00   \n","25%         0.09       0.14       0.11        0.11        0.00       0.03   \n","50%         0.10       0.15       0.12        0.12        0.00       0.05   \n","75%         0.12       0.18       0.14        0.14        0.00       0.06   \n","max         0.63       0.98       0.68        0.69    13701.00       0.89   \n","\n","       B02_count    B03_min    B03_max   B03_mean  ...      sipi_min  \\\n","count  208932.00  167264.00  167264.00  167264.00  ...  1.672600e+05   \n","mean       99.74       0.10       0.16       0.13  ... -1.688595e+35   \n","std       699.33       0.03       0.05       0.04  ...  7.578372e+36   \n","min         0.00       0.02       0.05       0.05  ... -3.402823e+38   \n","25%        11.00       0.08       0.14       0.11  ...  7.500000e-01   \n","50%        29.00       0.09       0.15       0.12  ...  8.500000e-01   \n","75%        56.00       0.11       0.18       0.14  ...  9.000000e-01   \n","max     13701.00       0.62       1.06       0.68  ...  1.890000e+00   \n","\n","           sipi_max  sipi_mean  sipi_median  sipi_nodata    sipi_range  \\\n","count  1.672600e+05  167260.00    167260.00     208932.0  1.672600e+05   \n","mean   1.708939e+35        NaN         0.97         25.2  3.397534e+35   \n","std    7.623866e+36        NaN         0.25        341.5  1.125051e+37   \n","min   -9.350000e+00       -inf       -22.15          0.0  0.000000e+00   \n","25%    1.040000e+00       0.90         0.89          0.0  2.100000e-01   \n","50%    1.190000e+00       0.97         0.96          0.0  3.600000e-01   \n","75%    1.460000e+00       1.07         1.05          0.0  6.400000e-01   \n","max    3.402823e+38        inf        16.32      13701.0  6.805647e+38   \n","\n","       sipi_count  clouds_on_raster        osm_id     area_m2  \n","count   208932.00         208932.00  2.089320e+05   208932.00  \n","mean        99.73             19.47  4.343631e+08    12493.88  \n","std        699.31             33.42  2.141069e+08    78957.30  \n","min          0.00              0.00  1.331006e+06      422.60  \n","25%         11.00              0.00  2.867065e+08     2066.56  \n","50%         29.00              0.00  3.596742e+08     3812.18  \n","75%         56.00             25.01  6.059767e+08     6644.79  \n","max      13701.00            100.00  9.249657e+08  1370630.49  \n","\n","[8 rows x 164 columns]"],"text/html":["\n","  <div id=\"df-ec1af850-ef7a-4c0d-9e53-345dff7d372b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>B02_min</th>\n","      <th>B02_max</th>\n","      <th>B02_mean</th>\n","      <th>B02_median</th>\n","      <th>B02_nodata</th>\n","      <th>B02_range</th>\n","      <th>B02_count</th>\n","      <th>B03_min</th>\n","      <th>B03_max</th>\n","      <th>B03_mean</th>\n","      <th>...</th>\n","      <th>sipi_min</th>\n","      <th>sipi_max</th>\n","      <th>sipi_mean</th>\n","      <th>sipi_median</th>\n","      <th>sipi_nodata</th>\n","      <th>sipi_range</th>\n","      <th>sipi_count</th>\n","      <th>clouds_on_raster</th>\n","      <th>osm_id</th>\n","      <th>area_m2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>167269.00</td>\n","      <td>167269.00</td>\n","      <td>167269.00</td>\n","      <td>167269.00</td>\n","      <td>208932.00</td>\n","      <td>167269.00</td>\n","      <td>208932.00</td>\n","      <td>167264.00</td>\n","      <td>167264.00</td>\n","      <td>167264.00</td>\n","      <td>...</td>\n","      <td>1.672600e+05</td>\n","      <td>1.672600e+05</td>\n","      <td>167260.00</td>\n","      <td>167260.00</td>\n","      <td>208932.0</td>\n","      <td>1.672600e+05</td>\n","      <td>208932.00</td>\n","      <td>208932.00</td>\n","      <td>2.089320e+05</td>\n","      <td>208932.00</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.11</td>\n","      <td>0.17</td>\n","      <td>0.13</td>\n","      <td>0.13</td>\n","      <td>25.19</td>\n","      <td>0.06</td>\n","      <td>99.74</td>\n","      <td>0.10</td>\n","      <td>0.16</td>\n","      <td>0.13</td>\n","      <td>...</td>\n","      <td>-1.688595e+35</td>\n","      <td>1.708939e+35</td>\n","      <td>NaN</td>\n","      <td>0.97</td>\n","      <td>25.2</td>\n","      <td>3.397534e+35</td>\n","      <td>99.73</td>\n","      <td>19.47</td>\n","      <td>4.343631e+08</td>\n","      <td>12493.88</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.03</td>\n","      <td>0.05</td>\n","      <td>0.03</td>\n","      <td>0.04</td>\n","      <td>341.30</td>\n","      <td>0.04</td>\n","      <td>699.33</td>\n","      <td>0.03</td>\n","      <td>0.05</td>\n","      <td>0.04</td>\n","      <td>...</td>\n","      <td>7.578372e+36</td>\n","      <td>7.623866e+36</td>\n","      <td>NaN</td>\n","      <td>0.25</td>\n","      <td>341.5</td>\n","      <td>1.125051e+37</td>\n","      <td>699.31</td>\n","      <td>33.42</td>\n","      <td>2.141069e+08</td>\n","      <td>78957.30</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.00</td>\n","      <td>0.07</td>\n","      <td>0.06</td>\n","      <td>0.06</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.02</td>\n","      <td>0.05</td>\n","      <td>0.05</td>\n","      <td>...</td>\n","      <td>-3.402823e+38</td>\n","      <td>-9.350000e+00</td>\n","      <td>-inf</td>\n","      <td>-22.15</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.331006e+06</td>\n","      <td>422.60</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.09</td>\n","      <td>0.14</td>\n","      <td>0.11</td>\n","      <td>0.11</td>\n","      <td>0.00</td>\n","      <td>0.03</td>\n","      <td>11.00</td>\n","      <td>0.08</td>\n","      <td>0.14</td>\n","      <td>0.11</td>\n","      <td>...</td>\n","      <td>7.500000e-01</td>\n","      <td>1.040000e+00</td>\n","      <td>0.90</td>\n","      <td>0.89</td>\n","      <td>0.0</td>\n","      <td>2.100000e-01</td>\n","      <td>11.00</td>\n","      <td>0.00</td>\n","      <td>2.867065e+08</td>\n","      <td>2066.56</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.10</td>\n","      <td>0.15</td>\n","      <td>0.12</td>\n","      <td>0.12</td>\n","      <td>0.00</td>\n","      <td>0.05</td>\n","      <td>29.00</td>\n","      <td>0.09</td>\n","      <td>0.15</td>\n","      <td>0.12</td>\n","      <td>...</td>\n","      <td>8.500000e-01</td>\n","      <td>1.190000e+00</td>\n","      <td>0.97</td>\n","      <td>0.96</td>\n","      <td>0.0</td>\n","      <td>3.600000e-01</td>\n","      <td>29.00</td>\n","      <td>0.00</td>\n","      <td>3.596742e+08</td>\n","      <td>3812.18</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>0.12</td>\n","      <td>0.18</td>\n","      <td>0.14</td>\n","      <td>0.14</td>\n","      <td>0.00</td>\n","      <td>0.06</td>\n","      <td>56.00</td>\n","      <td>0.11</td>\n","      <td>0.18</td>\n","      <td>0.14</td>\n","      <td>...</td>\n","      <td>9.000000e-01</td>\n","      <td>1.460000e+00</td>\n","      <td>1.07</td>\n","      <td>1.05</td>\n","      <td>0.0</td>\n","      <td>6.400000e-01</td>\n","      <td>56.00</td>\n","      <td>25.01</td>\n","      <td>6.059767e+08</td>\n","      <td>6644.79</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>0.63</td>\n","      <td>0.98</td>\n","      <td>0.68</td>\n","      <td>0.69</td>\n","      <td>13701.00</td>\n","      <td>0.89</td>\n","      <td>13701.00</td>\n","      <td>0.62</td>\n","      <td>1.06</td>\n","      <td>0.68</td>\n","      <td>...</td>\n","      <td>1.890000e+00</td>\n","      <td>3.402823e+38</td>\n","      <td>inf</td>\n","      <td>16.32</td>\n","      <td>13701.0</td>\n","      <td>6.805647e+38</td>\n","      <td>13701.00</td>\n","      <td>100.00</td>\n","      <td>9.249657e+08</td>\n","      <td>1370630.49</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 164 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec1af850-ef7a-4c0d-9e53-345dff7d372b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ec1af850-ef7a-4c0d-9e53-345dff7d372b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ec1af850-ef7a-4c0d-9e53-345dff7d372b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["round(df_no_verde.describe(),2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":393},"id":"IDSudFlVWYYT","executionInfo":{"status":"ok","timestamp":1659225153998,"user_tz":180,"elapsed":1640,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"96ca61d4-1e64-4938-b435-243be8c9b175"},"id":"IDSudFlVWYYT","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        B02_min   B02_max  B02_mean  B02_median  B02_nodata  B02_range  \\\n","count  77814.00  77814.00  77814.00    77814.00    96600.00   77814.00   \n","mean       0.10      0.28      0.15        0.15       63.74       0.17   \n","std        0.03      0.11      0.04        0.04      125.28       0.11   \n","min        0.00      0.07      0.07        0.07        0.00       0.00   \n","25%        0.09      0.21      0.13        0.12        0.00       0.10   \n","50%        0.10      0.27      0.15        0.14        0.00       0.17   \n","75%        0.11      0.33      0.17        0.16        0.00       0.23   \n","max        0.51      1.74      0.61        0.65      318.00       1.66   \n","\n","       B02_count   B03_min   B03_max  B03_mean  ...  tcariOsavi_count  \\\n","count   96600.00  77813.00  77813.00  77813.00  ...          96600.00   \n","mean      249.97      0.09      0.28      0.15  ...            249.96   \n","std       125.29      0.03      0.11      0.04  ...            125.30   \n","min         0.00      0.00      0.05      0.05  ...              0.00   \n","25%       310.00      0.08      0.21      0.12  ...            310.00   \n","50%       313.00      0.09      0.27      0.14  ...            313.00   \n","75%       315.00      0.10      0.33      0.17  ...            315.00   \n","max       318.00      0.51      1.68      0.60  ...            318.00   \n","\n","           sipi_min      sipi_max  sipi_mean  sipi_median  sipi_nodata  \\\n","count  7.780700e+04  7.780700e+04   77807.00     77807.00     96600.00   \n","mean  -3.297555e+36  6.931864e+36        NaN         1.01        63.76   \n","std    3.333527e+37  4.807047e+37        NaN         0.44       125.29   \n","min   -3.402823e+38 -1.251000e+01       -inf       -53.57         0.00   \n","25%   -1.710000e+01  1.740000e+00       0.91         0.91         0.00   \n","50%   -2.420000e+00  5.700000e+00       1.04         1.00         0.00   \n","75%    7.100000e-01  2.078000e+01       1.20         1.11         0.00   \n","max    4.820000e+00  3.402823e+38        inf        13.61       318.00   \n","\n","         sipi_range  sipi_count  clouds_on_raster   area_m2  \n","count  7.780700e+04    96600.00          96600.00  96600.00  \n","mean   1.022942e+37      249.96             19.47  31365.48  \n","std    5.879334e+37      125.30             33.42      0.00  \n","min    0.000000e+00        0.00              0.00  31365.48  \n","25%    1.250000e+00      310.00              0.00  31365.48  \n","50%    1.153000e+01      313.00              0.00  31365.48  \n","75%    5.089000e+01      315.00             25.01  31365.48  \n","max    6.805647e+38      318.00            100.00  31365.48  \n","\n","[8 rows x 163 columns]"],"text/html":["\n","  <div id=\"df-042e2883-105e-4dde-b1b0-87d41c7f33c6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>B02_min</th>\n","      <th>B02_max</th>\n","      <th>B02_mean</th>\n","      <th>B02_median</th>\n","      <th>B02_nodata</th>\n","      <th>B02_range</th>\n","      <th>B02_count</th>\n","      <th>B03_min</th>\n","      <th>B03_max</th>\n","      <th>B03_mean</th>\n","      <th>...</th>\n","      <th>tcariOsavi_count</th>\n","      <th>sipi_min</th>\n","      <th>sipi_max</th>\n","      <th>sipi_mean</th>\n","      <th>sipi_median</th>\n","      <th>sipi_nodata</th>\n","      <th>sipi_range</th>\n","      <th>sipi_count</th>\n","      <th>clouds_on_raster</th>\n","      <th>area_m2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>77814.00</td>\n","      <td>77814.00</td>\n","      <td>77814.00</td>\n","      <td>77814.00</td>\n","      <td>96600.00</td>\n","      <td>77814.00</td>\n","      <td>96600.00</td>\n","      <td>77813.00</td>\n","      <td>77813.00</td>\n","      <td>77813.00</td>\n","      <td>...</td>\n","      <td>96600.00</td>\n","      <td>7.780700e+04</td>\n","      <td>7.780700e+04</td>\n","      <td>77807.00</td>\n","      <td>77807.00</td>\n","      <td>96600.00</td>\n","      <td>7.780700e+04</td>\n","      <td>96600.00</td>\n","      <td>96600.00</td>\n","      <td>96600.00</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.10</td>\n","      <td>0.28</td>\n","      <td>0.15</td>\n","      <td>0.15</td>\n","      <td>63.74</td>\n","      <td>0.17</td>\n","      <td>249.97</td>\n","      <td>0.09</td>\n","      <td>0.28</td>\n","      <td>0.15</td>\n","      <td>...</td>\n","      <td>249.96</td>\n","      <td>-3.297555e+36</td>\n","      <td>6.931864e+36</td>\n","      <td>NaN</td>\n","      <td>1.01</td>\n","      <td>63.76</td>\n","      <td>1.022942e+37</td>\n","      <td>249.96</td>\n","      <td>19.47</td>\n","      <td>31365.48</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.03</td>\n","      <td>0.11</td>\n","      <td>0.04</td>\n","      <td>0.04</td>\n","      <td>125.28</td>\n","      <td>0.11</td>\n","      <td>125.29</td>\n","      <td>0.03</td>\n","      <td>0.11</td>\n","      <td>0.04</td>\n","      <td>...</td>\n","      <td>125.30</td>\n","      <td>3.333527e+37</td>\n","      <td>4.807047e+37</td>\n","      <td>NaN</td>\n","      <td>0.44</td>\n","      <td>125.29</td>\n","      <td>5.879334e+37</td>\n","      <td>125.30</td>\n","      <td>33.42</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.00</td>\n","      <td>0.07</td>\n","      <td>0.07</td>\n","      <td>0.07</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.05</td>\n","      <td>0.05</td>\n","      <td>...</td>\n","      <td>0.00</td>\n","      <td>-3.402823e+38</td>\n","      <td>-1.251000e+01</td>\n","      <td>-inf</td>\n","      <td>-53.57</td>\n","      <td>0.00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>31365.48</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.09</td>\n","      <td>0.21</td>\n","      <td>0.13</td>\n","      <td>0.12</td>\n","      <td>0.00</td>\n","      <td>0.10</td>\n","      <td>310.00</td>\n","      <td>0.08</td>\n","      <td>0.21</td>\n","      <td>0.12</td>\n","      <td>...</td>\n","      <td>310.00</td>\n","      <td>-1.710000e+01</td>\n","      <td>1.740000e+00</td>\n","      <td>0.91</td>\n","      <td>0.91</td>\n","      <td>0.00</td>\n","      <td>1.250000e+00</td>\n","      <td>310.00</td>\n","      <td>0.00</td>\n","      <td>31365.48</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.10</td>\n","      <td>0.27</td>\n","      <td>0.15</td>\n","      <td>0.14</td>\n","      <td>0.00</td>\n","      <td>0.17</td>\n","      <td>313.00</td>\n","      <td>0.09</td>\n","      <td>0.27</td>\n","      <td>0.14</td>\n","      <td>...</td>\n","      <td>313.00</td>\n","      <td>-2.420000e+00</td>\n","      <td>5.700000e+00</td>\n","      <td>1.04</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>1.153000e+01</td>\n","      <td>313.00</td>\n","      <td>0.00</td>\n","      <td>31365.48</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>0.11</td>\n","      <td>0.33</td>\n","      <td>0.17</td>\n","      <td>0.16</td>\n","      <td>0.00</td>\n","      <td>0.23</td>\n","      <td>315.00</td>\n","      <td>0.10</td>\n","      <td>0.33</td>\n","      <td>0.17</td>\n","      <td>...</td>\n","      <td>315.00</td>\n","      <td>7.100000e-01</td>\n","      <td>2.078000e+01</td>\n","      <td>1.20</td>\n","      <td>1.11</td>\n","      <td>0.00</td>\n","      <td>5.089000e+01</td>\n","      <td>315.00</td>\n","      <td>25.01</td>\n","      <td>31365.48</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>0.51</td>\n","      <td>1.74</td>\n","      <td>0.61</td>\n","      <td>0.65</td>\n","      <td>318.00</td>\n","      <td>1.66</td>\n","      <td>318.00</td>\n","      <td>0.51</td>\n","      <td>1.68</td>\n","      <td>0.60</td>\n","      <td>...</td>\n","      <td>318.00</td>\n","      <td>4.820000e+00</td>\n","      <td>3.402823e+38</td>\n","      <td>inf</td>\n","      <td>13.61</td>\n","      <td>318.00</td>\n","      <td>6.805647e+38</td>\n","      <td>318.00</td>\n","      <td>100.00</td>\n","      <td>31365.48</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 163 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-042e2883-105e-4dde-b1b0-87d41c7f33c6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-042e2883-105e-4dde-b1b0-87d41c7f33c6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-042e2883-105e-4dde-b1b0-87d41c7f33c6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#extrae los atributos de los tipos de objetos y muestra su recuento.\n","df_no_verde.describe(include='O')#es para que en el describe aparezcan las variables categoricas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"il7TEHCVXsU7","executionInfo":{"status":"ok","timestamp":1659225154036,"user_tz":180,"elapsed":290,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"7756c5ec-f8d7-40e3-8fdf-8105e645783b"},"id":"il7TEHCVXsU7","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   raster   osm_id       name  \\\n","count                                               96600    96600      96600   \n","unique                                                276      350          1   \n","top     S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...  259-nev  undefined   \n","freq                                                  350      276      96600   \n","\n","          desc        date  \n","count    96600       96600  \n","unique       4         276  \n","top     Barrio  2017-01-03  \n","freq     45540         350  "],"text/html":["\n","  <div id=\"df-0424ec9c-0347-4232-bbc6-a65ff26da85d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>raster</th>\n","      <th>osm_id</th>\n","      <th>name</th>\n","      <th>desc</th>\n","      <th>date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>96600</td>\n","      <td>96600</td>\n","      <td>96600</td>\n","      <td>96600</td>\n","      <td>96600</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>276</td>\n","      <td>350</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>276</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>259-nev</td>\n","      <td>undefined</td>\n","      <td>Barrio</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>350</td>\n","      <td>276</td>\n","      <td>96600</td>\n","      <td>45540</td>\n","      <td>350</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0424ec9c-0347-4232-bbc6-a65ff26da85d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0424ec9c-0347-4232-bbc6-a65ff26da85d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0424ec9c-0347-4232-bbc6-a65ff26da85d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df_verde.describe(include='O')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"Vg8t6CxdX4GB","executionInfo":{"status":"ok","timestamp":1659225154048,"user_tz":180,"elapsed":292,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"825d14bc-bcaf-4c59-96cd-47febf0bfd28"},"id":"Vg8t6CxdX4GB","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   raster   name        date\n","count                                              208932  52716      208932\n","unique                                                276    185         276\n","top     S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...  Plaza  2017-01-03\n","freq                                                  757   1104         757"],"text/html":["\n","  <div id=\"df-a8a848cf-5fbf-4307-8072-5bc3cb9e7a38\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>raster</th>\n","      <th>name</th>\n","      <th>date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>208932</td>\n","      <td>52716</td>\n","      <td>208932</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>276</td>\n","      <td>185</td>\n","      <td>276</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>Plaza</td>\n","      <td>2017-01-03</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>757</td>\n","      <td>1104</td>\n","      <td>757</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8a848cf-5fbf-4307-8072-5bc3cb9e7a38')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a8a848cf-5fbf-4307-8072-5bc3cb9e7a38 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a8a848cf-5fbf-4307-8072-5bc3cb9e7a38');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["\n","categorical_verde = [var for var in df_verde.columns if df_verde[var].dtype=='O'] \n","categorical_verde"],"metadata":{"id":"DsLgM2E3YAaR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659225154057,"user_tz":180,"elapsed":288,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"c0845162-4f93-4710-9faa-5fe83529b529"},"id":"DsLgM2E3YAaR","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['raster', 'name', 'date']"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["categorical_no_verde = [var for var in df_no_verde.columns if df_no_verde[var].dtype=='O'] \n","categorical_no_verde"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mWRgW8ceKLPV","executionInfo":{"status":"ok","timestamp":1659225154058,"user_tz":180,"elapsed":258,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"944734fa-d69b-4d7a-f67f-d15e7bdb47d3"},"id":"mWRgW8ceKLPV","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['raster', 'osm_id', 'name', 'desc', 'date']"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":[""],"metadata":{"id":"IM16tbxVWrd3"},"id":"IM16tbxVWrd3","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Notar que la variable osm_id es categórica en el dataset correspondiente a espacios no verdes y es numérica en el conjunto de datos correspondiente a espacios verdes. Convertiremos a tipo numérico los registros de osm_id del conjunto df_no_verde."],"metadata":{"id":"BF4s-vnJL-FD"},"id":"BF4s-vnJL-FD"},{"cell_type":"code","source":["#df_no_verde[['osm_id']].info()"],"metadata":{"id":"UDizeAYrN2u7"},"id":"UDizeAYrN2u7","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df_no_verde.isna().sum()"],"metadata":{"id":"SjMJBwZEW_ur"},"id":"SjMJBwZEW_ur","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df['zipcode'] = pd.to_numeric(airbnb_df.zipcode, errors='coerce')\n","#df_no_verde['osm_id'] = pd.to_numeric(df_no_verde['osm_id'], errors='coerce')"],"metadata":{"id":"5q-ghD2XMWQf"},"id":"5q-ghD2XMWQf","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df_no_verde[['osm_id']].info()"],"metadata":{"id":"5C9TYMtmULC1"},"id":"5C9TYMtmULC1","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Comenzamos a preparar el conjunto de datos para los modelos a utilizar. Para ello asignamos a una variable target los valores 0 y 1 bajo las siguientes condiciones:\n","- 0 si el espacio no es verde (para df_no_verde )\n","- 1 si el espacio es verde (para df_verde)\n","\n","La idea es agregar a cada dataset (df_verde y df_no_verde) la columna target con los valores que le correspondan.\n","\n","Preparar el conjunto de datos bajo esta perspectiva nos estaría dando una primera aproximación a lo que sería un problema de clasificación."],"metadata":{"id":"OvzWgLQZpcsX"},"id":"OvzWgLQZpcsX"},{"cell_type":"code","source":["df_verde_copy=df_verde.copy()\n","df_verde_copy=df_verde_copy.assign(target=1) #1 = área verde\n"],"metadata":{"id":"iGL_9z1CfC-K"},"id":"iGL_9z1CfC-K","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_verde_copy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":678},"id":"khz-2PQEf4-s","executionInfo":{"status":"ok","timestamp":1659225155055,"user_tz":180,"elapsed":181,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"c52f0415-f8ff-4cd0-b65a-c6f5cbc310df"},"id":"khz-2PQEf4-s","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        B02_min  B02_max  B02_mean  B02_median  B02_nodata  B02_range  \\\n","0        0.0871   0.1421  0.102570     0.09650         0.0     0.0550   \n","1        0.0970   0.1936  0.118354     0.10660         0.0     0.0966   \n","2        0.0992   0.1273  0.111805     0.11290         0.0     0.0281   \n","3        0.0995   0.1933  0.118491     0.11355         0.0     0.0938   \n","4        0.1059   0.1385  0.122453     0.12240         0.0     0.0326   \n","...         ...      ...       ...         ...         ...        ...   \n","208927   0.0990   0.1684  0.115990     0.11270         0.0     0.0694   \n","208928   0.1145   0.3240  0.149746     0.13665         0.0     0.2095   \n","208929   0.0993   0.1388  0.110870     0.10625         0.0     0.0395   \n","208930   0.0991   0.1407  0.124008     0.12570         0.0     0.0416   \n","208931   0.0874   0.1347  0.104697     0.10180         0.0     0.0473   \n","\n","        B02_count  B03_min  B03_max  B03_mean  ...  sipi_nodata  sipi_range  \\\n","0              47   0.0768   0.1516  0.098885  ...          0.0    0.453065   \n","1              13   0.1006   0.1949  0.122154  ...          0.0    0.247045   \n","2              19   0.1037   0.1369  0.117795  ...          0.0    0.207006   \n","3              66   0.0993   0.1990  0.124512  ...          0.0    0.258424   \n","4              47   0.1036   0.1580  0.132455  ...          0.0    0.260419   \n","...           ...      ...      ...       ...  ...          ...         ...   \n","208927         31   0.0862   0.1627  0.107387  ...          0.0    0.545993   \n","208928         80   0.0977   0.3363  0.149332  ...          0.0    2.805242   \n","208929         10   0.0930   0.1473  0.106160  ...          0.0    0.199024   \n","208930         53   0.0852   0.1377  0.118574  ...          0.0    0.299910   \n","208931         95   0.0707   0.1321  0.095941  ...          0.0    0.456241   \n","\n","        sipi_count                                             raster  \\\n","0               47  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","1               13  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","2               19  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","3               66  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","4               47  S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...   \n","...            ...                                                ...   \n","208927          31  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...   \n","208928          80  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...   \n","208929          10  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...   \n","208930          53  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...   \n","208931          95  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...   \n","\n","        clouds_on_raster     osm_id                name      area_m2  \\\n","0                    0.0  605976736                 NaN  4650.710032   \n","1                    0.0  559322368                 NaN  1502.000513   \n","2                    0.0  559322369                 NaN  2004.192528   \n","3                    0.0  559328111                 NaN  6940.507640   \n","4                    0.0  559328112                 NaN  4587.356048   \n","...                  ...        ...                 ...          ...   \n","208927               0.0  307532496                 NaN  3824.467794   \n","208928               0.0  307535460  Plaza Exodo Jujeño  7184.535857   \n","208929               0.0  307796387                 NaN  1147.997645   \n","208930               0.0  307097955                 NaN  5185.690046   \n","208931               0.0  901791744                 NaN  9394.381202   \n","\n","              date  target  \n","0       2017-01-03       1  \n","1       2017-01-03       1  \n","2       2017-01-03       1  \n","3       2017-01-03       1  \n","4       2017-01-03       1  \n","...            ...     ...  \n","208927  2022-04-17       1  \n","208928  2022-04-17       1  \n","208929  2022-04-17       1  \n","208930  2022-04-17       1  \n","208931  2022-04-17       1  \n","\n","[208932 rows x 168 columns]"],"text/html":["\n","  <div id=\"df-0ab60d4d-fd43-421e-a19a-97eca1e3e6e2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>B02_min</th>\n","      <th>B02_max</th>\n","      <th>B02_mean</th>\n","      <th>B02_median</th>\n","      <th>B02_nodata</th>\n","      <th>B02_range</th>\n","      <th>B02_count</th>\n","      <th>B03_min</th>\n","      <th>B03_max</th>\n","      <th>B03_mean</th>\n","      <th>...</th>\n","      <th>sipi_nodata</th>\n","      <th>sipi_range</th>\n","      <th>sipi_count</th>\n","      <th>raster</th>\n","      <th>clouds_on_raster</th>\n","      <th>osm_id</th>\n","      <th>name</th>\n","      <th>area_m2</th>\n","      <th>date</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0871</td>\n","      <td>0.1421</td>\n","      <td>0.102570</td>\n","      <td>0.09650</td>\n","      <td>0.0</td>\n","      <td>0.0550</td>\n","      <td>47</td>\n","      <td>0.0768</td>\n","      <td>0.1516</td>\n","      <td>0.098885</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.453065</td>\n","      <td>47</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>605976736</td>\n","      <td>NaN</td>\n","      <td>4650.710032</td>\n","      <td>2017-01-03</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0970</td>\n","      <td>0.1936</td>\n","      <td>0.118354</td>\n","      <td>0.10660</td>\n","      <td>0.0</td>\n","      <td>0.0966</td>\n","      <td>13</td>\n","      <td>0.1006</td>\n","      <td>0.1949</td>\n","      <td>0.122154</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.247045</td>\n","      <td>13</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559322368</td>\n","      <td>NaN</td>\n","      <td>1502.000513</td>\n","      <td>2017-01-03</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0992</td>\n","      <td>0.1273</td>\n","      <td>0.111805</td>\n","      <td>0.11290</td>\n","      <td>0.0</td>\n","      <td>0.0281</td>\n","      <td>19</td>\n","      <td>0.1037</td>\n","      <td>0.1369</td>\n","      <td>0.117795</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.207006</td>\n","      <td>19</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559322369</td>\n","      <td>NaN</td>\n","      <td>2004.192528</td>\n","      <td>2017-01-03</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0995</td>\n","      <td>0.1933</td>\n","      <td>0.118491</td>\n","      <td>0.11355</td>\n","      <td>0.0</td>\n","      <td>0.0938</td>\n","      <td>66</td>\n","      <td>0.0993</td>\n","      <td>0.1990</td>\n","      <td>0.124512</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.258424</td>\n","      <td>66</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559328111</td>\n","      <td>NaN</td>\n","      <td>6940.507640</td>\n","      <td>2017-01-03</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.1059</td>\n","      <td>0.1385</td>\n","      <td>0.122453</td>\n","      <td>0.12240</td>\n","      <td>0.0</td>\n","      <td>0.0326</td>\n","      <td>47</td>\n","      <td>0.1036</td>\n","      <td>0.1580</td>\n","      <td>0.132455</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.260419</td>\n","      <td>47</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>559328112</td>\n","      <td>NaN</td>\n","      <td>4587.356048</td>\n","      <td>2017-01-03</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>208927</th>\n","      <td>0.0990</td>\n","      <td>0.1684</td>\n","      <td>0.115990</td>\n","      <td>0.11270</td>\n","      <td>0.0</td>\n","      <td>0.0694</td>\n","      <td>31</td>\n","      <td>0.0862</td>\n","      <td>0.1627</td>\n","      <td>0.107387</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.545993</td>\n","      <td>31</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>307532496</td>\n","      <td>NaN</td>\n","      <td>3824.467794</td>\n","      <td>2022-04-17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>208928</th>\n","      <td>0.1145</td>\n","      <td>0.3240</td>\n","      <td>0.149746</td>\n","      <td>0.13665</td>\n","      <td>0.0</td>\n","      <td>0.2095</td>\n","      <td>80</td>\n","      <td>0.0977</td>\n","      <td>0.3363</td>\n","      <td>0.149332</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>2.805242</td>\n","      <td>80</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>307535460</td>\n","      <td>Plaza Exodo Jujeño</td>\n","      <td>7184.535857</td>\n","      <td>2022-04-17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>208929</th>\n","      <td>0.0993</td>\n","      <td>0.1388</td>\n","      <td>0.110870</td>\n","      <td>0.10625</td>\n","      <td>0.0</td>\n","      <td>0.0395</td>\n","      <td>10</td>\n","      <td>0.0930</td>\n","      <td>0.1473</td>\n","      <td>0.106160</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.199024</td>\n","      <td>10</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>307796387</td>\n","      <td>NaN</td>\n","      <td>1147.997645</td>\n","      <td>2022-04-17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>208930</th>\n","      <td>0.0991</td>\n","      <td>0.1407</td>\n","      <td>0.124008</td>\n","      <td>0.12570</td>\n","      <td>0.0</td>\n","      <td>0.0416</td>\n","      <td>53</td>\n","      <td>0.0852</td>\n","      <td>0.1377</td>\n","      <td>0.118574</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.299910</td>\n","      <td>53</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>307097955</td>\n","      <td>NaN</td>\n","      <td>5185.690046</td>\n","      <td>2022-04-17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>208931</th>\n","      <td>0.0874</td>\n","      <td>0.1347</td>\n","      <td>0.104697</td>\n","      <td>0.10180</td>\n","      <td>0.0</td>\n","      <td>0.0473</td>\n","      <td>95</td>\n","      <td>0.0707</td>\n","      <td>0.1321</td>\n","      <td>0.095941</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.456241</td>\n","      <td>95</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>901791744</td>\n","      <td>NaN</td>\n","      <td>9394.381202</td>\n","      <td>2022-04-17</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>208932 rows × 168 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ab60d4d-fd43-421e-a19a-97eca1e3e6e2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0ab60d4d-fd43-421e-a19a-97eca1e3e6e2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0ab60d4d-fd43-421e-a19a-97eca1e3e6e2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df_no_verde_copy=df_no_verde.copy()\n","df_no_verde_copy=df_no_verde_copy.assign(target=0) #0 = área no verde"],"metadata":{"id":"iMQj5kDbiuqm"},"id":"iMQj5kDbiuqm","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_no_verde_copy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":765},"id":"IjAHbP0Ei8kL","executionInfo":{"status":"ok","timestamp":1659225155070,"user_tz":180,"elapsed":193,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"e8ac07d8-f1c4-4553-adca-f340edcf34c9"},"id":"IjAHbP0Ei8kL","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       B02_min  B02_max  B02_mean  B02_median  B02_nodata  B02_range  \\\n","0       0.0894   0.3261  0.165313     0.15350         0.0     0.2367   \n","1       0.0950   0.5436  0.166934     0.14690         0.0     0.4486   \n","2       0.0867   0.3236  0.163555     0.15535         0.0     0.2369   \n","3       0.0874   0.3107  0.134499     0.13110         0.0     0.2233   \n","4       0.0826   0.2872  0.127382     0.11620         0.0     0.2046   \n","...        ...      ...       ...         ...         ...        ...   \n","96595   0.0970   0.1989  0.130811     0.12560         0.0     0.1019   \n","96596   0.0845   0.1079  0.095076     0.09480         0.0     0.0234   \n","96597   0.0889   0.2408  0.107040     0.09700         0.0     0.1519   \n","96598   0.0888   0.1114  0.097821     0.09710         0.0     0.0226   \n","96599   0.1044   0.3219  0.166187     0.15720         0.0     0.2175   \n","\n","       B02_count  B03_min  B03_max  B03_mean  ...  sipi_range  sipi_count  \\\n","0            313   0.0827   0.3737  0.168369  ...   88.165550         313   \n","1            317   0.0927   0.5340  0.170916  ...   69.959171         317   \n","2            314   0.0807   0.3693  0.164975  ...   52.476419         314   \n","3            315   0.0776   0.3101  0.132847  ...   35.171722         315   \n","4            313   0.0722   0.3367  0.124013  ...    1.484326         313   \n","...          ...      ...      ...       ...  ...         ...         ...   \n","96595        314   0.0896   0.1865  0.123040  ...    0.700533         314   \n","96596        316   0.0676   0.1068  0.085975  ...    0.180143         316   \n","96597        315   0.0709   0.2314  0.097107  ...    0.659232         315   \n","96598        316   0.0775   0.1132  0.088157  ...    0.169072         316   \n","96599        316   0.0890   0.3411  0.157397  ...  180.585279         316   \n","\n","                                                  raster  clouds_on_raster  \\\n","0      S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","1      S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","2      S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","3      S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","4      S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...               0.0   \n","...                                                  ...               ...   \n","96595  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...               0.0   \n","96596  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...               0.0   \n","96597  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...               0.0   \n","96598  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...               0.0   \n","96599  S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...               0.0   \n","\n","        osm_id       name       area_m2               desc        date  target  \n","0      259-nev  undefined  31365.484905             Barrio  2017-01-03       0  \n","1      237-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03       0  \n","2      236-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03       0  \n","3      235-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03       0  \n","4      234-nev  undefined  31365.484905  Barrio-Zona-Verde  2017-01-03       0  \n","...        ...        ...           ...                ...         ...     ...  \n","96595  110-nev  undefined  31365.484905             Barrio  2022-04-17       0  \n","96596  109-nev  undefined  31365.484905  Barrio-Zona-Verde  2022-04-17       0  \n","96597  108-nev  undefined  31365.484905  Barrio-Zona-Verde  2022-04-17       0  \n","96598  116-nev  undefined  31365.484905         Indefinido  2022-04-17       0  \n","96599  346-nev  undefined  31365.484905             Barrio  2022-04-17       0  \n","\n","[96600 rows x 169 columns]"],"text/html":["\n","  <div id=\"df-a6842e69-24f6-491a-ba50-e1d97d7a38f4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>B02_min</th>\n","      <th>B02_max</th>\n","      <th>B02_mean</th>\n","      <th>B02_median</th>\n","      <th>B02_nodata</th>\n","      <th>B02_range</th>\n","      <th>B02_count</th>\n","      <th>B03_min</th>\n","      <th>B03_max</th>\n","      <th>B03_mean</th>\n","      <th>...</th>\n","      <th>sipi_range</th>\n","      <th>sipi_count</th>\n","      <th>raster</th>\n","      <th>clouds_on_raster</th>\n","      <th>osm_id</th>\n","      <th>name</th>\n","      <th>area_m2</th>\n","      <th>desc</th>\n","      <th>date</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0894</td>\n","      <td>0.3261</td>\n","      <td>0.165313</td>\n","      <td>0.15350</td>\n","      <td>0.0</td>\n","      <td>0.2367</td>\n","      <td>313</td>\n","      <td>0.0827</td>\n","      <td>0.3737</td>\n","      <td>0.168369</td>\n","      <td>...</td>\n","      <td>88.165550</td>\n","      <td>313</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>259-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio</td>\n","      <td>2017-01-03</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0950</td>\n","      <td>0.5436</td>\n","      <td>0.166934</td>\n","      <td>0.14690</td>\n","      <td>0.0</td>\n","      <td>0.4486</td>\n","      <td>317</td>\n","      <td>0.0927</td>\n","      <td>0.5340</td>\n","      <td>0.170916</td>\n","      <td>...</td>\n","      <td>69.959171</td>\n","      <td>317</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>237-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0867</td>\n","      <td>0.3236</td>\n","      <td>0.163555</td>\n","      <td>0.15535</td>\n","      <td>0.0</td>\n","      <td>0.2369</td>\n","      <td>314</td>\n","      <td>0.0807</td>\n","      <td>0.3693</td>\n","      <td>0.164975</td>\n","      <td>...</td>\n","      <td>52.476419</td>\n","      <td>314</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>236-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0874</td>\n","      <td>0.3107</td>\n","      <td>0.134499</td>\n","      <td>0.13110</td>\n","      <td>0.0</td>\n","      <td>0.2233</td>\n","      <td>315</td>\n","      <td>0.0776</td>\n","      <td>0.3101</td>\n","      <td>0.132847</td>\n","      <td>...</td>\n","      <td>35.171722</td>\n","      <td>315</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>235-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0826</td>\n","      <td>0.2872</td>\n","      <td>0.127382</td>\n","      <td>0.11620</td>\n","      <td>0.0</td>\n","      <td>0.2046</td>\n","      <td>313</td>\n","      <td>0.0722</td>\n","      <td>0.3367</td>\n","      <td>0.124013</td>\n","      <td>...</td>\n","      <td>1.484326</td>\n","      <td>313</td>\n","      <td>S2A_MSIL1C_20170103T142022_N0204_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>234-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2017-01-03</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>96595</th>\n","      <td>0.0970</td>\n","      <td>0.1989</td>\n","      <td>0.130811</td>\n","      <td>0.12560</td>\n","      <td>0.0</td>\n","      <td>0.1019</td>\n","      <td>314</td>\n","      <td>0.0896</td>\n","      <td>0.1865</td>\n","      <td>0.123040</td>\n","      <td>...</td>\n","      <td>0.700533</td>\n","      <td>314</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>110-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio</td>\n","      <td>2022-04-17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>96596</th>\n","      <td>0.0845</td>\n","      <td>0.1079</td>\n","      <td>0.095076</td>\n","      <td>0.09480</td>\n","      <td>0.0</td>\n","      <td>0.0234</td>\n","      <td>316</td>\n","      <td>0.0676</td>\n","      <td>0.1068</td>\n","      <td>0.085975</td>\n","      <td>...</td>\n","      <td>0.180143</td>\n","      <td>316</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>109-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2022-04-17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>96597</th>\n","      <td>0.0889</td>\n","      <td>0.2408</td>\n","      <td>0.107040</td>\n","      <td>0.09700</td>\n","      <td>0.0</td>\n","      <td>0.1519</td>\n","      <td>315</td>\n","      <td>0.0709</td>\n","      <td>0.2314</td>\n","      <td>0.097107</td>\n","      <td>...</td>\n","      <td>0.659232</td>\n","      <td>315</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>108-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio-Zona-Verde</td>\n","      <td>2022-04-17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>96598</th>\n","      <td>0.0888</td>\n","      <td>0.1114</td>\n","      <td>0.097821</td>\n","      <td>0.09710</td>\n","      <td>0.0</td>\n","      <td>0.0226</td>\n","      <td>316</td>\n","      <td>0.0775</td>\n","      <td>0.1132</td>\n","      <td>0.088157</td>\n","      <td>...</td>\n","      <td>0.169072</td>\n","      <td>316</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>116-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Indefinido</td>\n","      <td>2022-04-17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>96599</th>\n","      <td>0.1044</td>\n","      <td>0.3219</td>\n","      <td>0.166187</td>\n","      <td>0.15720</td>\n","      <td>0.0</td>\n","      <td>0.2175</td>\n","      <td>316</td>\n","      <td>0.0890</td>\n","      <td>0.3411</td>\n","      <td>0.157397</td>\n","      <td>...</td>\n","      <td>180.585279</td>\n","      <td>316</td>\n","      <td>S2A_MSIL1C_20220417T141741_N0400_R010_T20JLL_2...</td>\n","      <td>0.0</td>\n","      <td>346-nev</td>\n","      <td>undefined</td>\n","      <td>31365.484905</td>\n","      <td>Barrio</td>\n","      <td>2022-04-17</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>96600 rows × 169 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6842e69-24f6-491a-ba50-e1d97d7a38f4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a6842e69-24f6-491a-ba50-e1d97d7a38f4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a6842e69-24f6-491a-ba50-e1d97d7a38f4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["2. Curacion (Recetas TP Exploración y Curación)"],"metadata":{"id":"5GB5GD0bZMjQ"},"id":"5GB5GD0bZMjQ"},{"cell_type":"markdown","source":["En el trabajo práctico N°1 se optó por trabajar con la mediana de los índices y bandas que figuran en nuestro dataset. Mediante un análisis de correlación de Pearson, se decidió que el conjunto de bandas e índices representativos sería el siguiente:\n","\n","* ndvi\n","* mNDVI\n","* gari\n","* tcariOsavi\n","* sipi\n","* ndii\n","* B04\n","* B08\n","* B11\n","\n","Por otro lado, en el trabajo práctico N°2, se agregaron las siguientes variables:\n","\n","- raster: raster del cual se extraen los estadísticos\n","- clouds_on_raster: nubosidad del raster completo\n","- osm_id: identificador asociado a la capa original (atlas-espacios-verdes)\n","- area_m2: area en metros cuadrados\n","- date: fecha de la muestra."],"metadata":{"id":"jsEZc0ggZ5UA"},"id":"jsEZc0ggZ5UA"},{"cell_type":"code","source":["INDICES_BANDAS=[\"ndvi_median\", \"mNDVI_median\", \"gari_median\",\"tcariOsavi_median\", \"sipi_median\", \n","                \"ndii_median\", \"B04_median\", \"B08_median\", \"B11_median\"]\n","\n","add= [\"raster\", \"clouds_on_raster\", \"area_m2\", \"date\", \"target\"]\n","\n","columnas_interes= INDICES_BANDAS + add"],"metadata":{"id":"ZVlhwy2MZWsG"},"id":"ZVlhwy2MZWsG","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["* Resumen de códigos para la implementación de recetas"],"metadata":{"id":"cblbFDKiacHh"},"id":"cblbFDKiacHh"},{"cell_type":"markdown","source":["Funciones a utilizar:"],"metadata":{"id":"_jsiGJr6w9YD"},"id":"_jsiGJr6w9YD"},{"cell_type":"code","source":["#elimina outliers\n","def CustomSampler_IQR (X, features):\n","      \n","    df = X.copy()\n","    \n","    \n","    indices = [x for x in df.index]    \n","    out_indexlist = []\n","        \n","    for col in features:\n","       \n","        #Using nanpercentile instead of percentile because of nan values\n","        Q1 = np.nanpercentile(df[col], 25.)\n","        Q3 = np.nanpercentile(df[col], 75.)\n","        \n","        cut_off = (Q3 - Q1) * 1.5\n","        upper, lower = Q3 + cut_off, Q1 - cut_off\n","                \n","        outliers_index = df[col][(df[col] < lower) | (df[col] > upper)].index.tolist()\n","        outliers = df[col][(df[col] < lower) | (df[col] > upper)].values        \n","        out_indexlist.extend(outliers_index)\n","        \n","    #using set to remove duplicates\n","    out_indexlist = list(set(out_indexlist))\n","    \n","    clean_data = np.setdiff1d(indices,out_indexlist)\n","\n","    return X.loc[clean_data]"],"metadata":{"id":"q7tV3o90xF16"},"id":"q7tV3o90xF16","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#elimina oultiers en una lista de DataFrames (en nuestro caso: verano, otoño, invierno , primavera)\n","def clear_df_outliers (df , colums):\n"," \n","  \"\"\"df es una lista de DataFrames y \n","     colum es una lista de features\"\"\"\n","  \n","  df_final=[]\n","\n","  for data in df:\n","     data = CustomSampler_IQR(data, colums)\n","     df_final.append(data)\n","  \n","  return pd.concat(df_final, axis=0, ignore_index= True)"],"metadata":{"id":"ci0VTT08EID9"},"id":"ci0VTT08EID9","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Imputación de valores faltantes con la mediana muestral por estación\n","def imputacion_median_nan (df, colum):\n","\n","  \"\"\"df es una lista de DataFrames y \n","     colum es una lista de features\"\"\"\n","\n","  from sklearn.impute import SimpleImputer\n","\n","  median_imputer= SimpleImputer(missing_values=np.nan, strategy='median') \n","\n","  df_final=[]\n","\n","  for data in df:\n","   data.loc[:,colum] = median_imputer.fit_transform(data[colum])\n","   df_final.append(data[colum])\n","  \n","  return pd.concat(df_final, axis=0, ignore_index= True)"],"metadata":{"id":"JFPZMfBzEXQn"},"id":"JFPZMfBzEXQn","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Imputación de valores faltantes con la media muestral por estación\n","def imputacion_mean_nan (df, colum):\n","\n","  \"\"\"df es una lista de DataFrame y \n","     colum es una lista de features\"\"\"\n","\n","  from sklearn.impute import SimpleImputer\n","\n","  mean_imputer= SimpleImputer(missing_values=np.nan, strategy='mean') \n","\n","  df_final=[]\n","\n","  for data in df:\n","   data.loc[:,colum] = mean_imputer.fit_transform(data[colum])\n","   df_final.append(data[colum])\n","  \n","  return pd.concat(df_final, axis=0, ignore_index= True)"],"metadata":{"id":"CMzqBpPvFQTC"},"id":"CMzqBpPvFQTC","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Le asigna a cada fecha la estación del año correspondiente.\n","from datetime import date, datetime\n","\n","def season_of_date(date):\n","    year = str(date.year)\n","    seasons = {'Otoño': pd.date_range(start='21/03/'+year, end='20/06/'+year),\n","               'Invierno': pd.date_range(start='21/06/'+year, end='22/09/'+year),\n","               'Primavera': pd.date_range(start='23/09/'+year, end='20/12/'+year)}\n","    if date in seasons['Primavera']:\n","        return 'Primavera'\n","    if date in seasons['Invierno']:\n","        return 'Invierno'\n","    if date in seasons['Otoño']:\n","        return 'Otoño'\n","    else:\n","        return 'Verano'"],"metadata":{"id":"a6iQ3qmWdRz3"},"id":"a6iQ3qmWdRz3","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_verde_initio = df_verde_copy[columnas_interes]\n","df_no_verde_initio = df_no_verde_copy[columnas_interes]\n","#agregar la columna estación"],"metadata":{"id":"UgJ4FoIqffw1"},"id":"UgJ4FoIqffw1","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_verde_initio['date'] = pd.to_datetime(df_verde_initio.date, format='%Y/%m/%d')\n","df_verde_initio['estacion'] = df_verde_initio.date.map(season_of_date)\n","\n","df_no_verde_initio['date'] = pd.to_datetime(df_no_verde_initio.date, format='%Y/%m/%d')\n","df_no_verde_initio['estacion'] = df_no_verde_initio.date.map(season_of_date)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dW_2dJmigcV9","executionInfo":{"status":"ok","timestamp":1659225355766,"user_tz":180,"elapsed":200124,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"291be40e-aada-4682-f754-b6d43d0f350c"},"id":"dW_2dJmigcV9","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n"]}]},{"cell_type":"code","source":["df_verde_initio.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mgr1Zyqfq2Z4","executionInfo":{"status":"ok","timestamp":1659225355768,"user_tz":180,"elapsed":39,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"56f704d0-6011-44e8-f5dd-edebc9c38188"},"id":"Mgr1Zyqfq2Z4","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 208932 entries, 0 to 208931\n","Data columns (total 15 columns):\n"," #   Column             Non-Null Count   Dtype         \n","---  ------             --------------   -----         \n"," 0   ndvi_median        167260 non-null  float64       \n"," 1   mNDVI_median       167260 non-null  float64       \n"," 2   gari_median        167260 non-null  float64       \n"," 3   tcariOsavi_median  167260 non-null  float64       \n"," 4   sipi_median        167260 non-null  float64       \n"," 5   ndii_median        167260 non-null  float64       \n"," 6   B04_median         167263 non-null  float64       \n"," 7   B08_median         167263 non-null  float64       \n"," 8   B11_median         167262 non-null  float64       \n"," 9   raster             208932 non-null  object        \n"," 10  clouds_on_raster   208932 non-null  float64       \n"," 11  area_m2            208932 non-null  float64       \n"," 12  date               208932 non-null  datetime64[ns]\n"," 13  target             208932 non-null  int64         \n"," 14  estacion           208932 non-null  object        \n","dtypes: datetime64[ns](1), float64(11), int64(1), object(2)\n","memory usage: 25.5+ MB\n"]}]},{"cell_type":"code","source":["df_no_verde_initio.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QC0kq4TRq9DW","executionInfo":{"status":"ok","timestamp":1659225355769,"user_tz":180,"elapsed":19,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"f66dbd4b-46c0-4bc6-c217-603da21a3b93"},"id":"QC0kq4TRq9DW","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 96600 entries, 0 to 96599\n","Data columns (total 15 columns):\n"," #   Column             Non-Null Count  Dtype         \n","---  ------             --------------  -----         \n"," 0   ndvi_median        77807 non-null  float64       \n"," 1   mNDVI_median       77807 non-null  float64       \n"," 2   gari_median        77807 non-null  float64       \n"," 3   tcariOsavi_median  77807 non-null  float64       \n"," 4   sipi_median        77807 non-null  float64       \n"," 5   ndii_median        77807 non-null  float64       \n"," 6   B04_median         77811 non-null  float64       \n"," 7   B08_median         77807 non-null  float64       \n"," 8   B11_median         77810 non-null  float64       \n"," 9   raster             96600 non-null  object        \n"," 10  clouds_on_raster   96600 non-null  float64       \n"," 11  area_m2            96600 non-null  float64       \n"," 12  date               96600 non-null  datetime64[ns]\n"," 13  target             96600 non-null  int64         \n"," 14  estacion           96600 non-null  object        \n","dtypes: datetime64[ns](1), float64(11), int64(1), object(2)\n","memory usage: 11.8+ MB\n"]}]},{"cell_type":"markdown","source":["**Receta A**: Esfuerzo nulo"],"metadata":{"id":"mK6QK0sKwBdB"},"id":"mK6QK0sKwBdB"},{"cell_type":"code","source":["#Receta A: espacios verdes\n","#lectura de datos + columnas de interes\n","df_A_verde = df_verde_initio.copy()\n","#imputación de valores faltantes\n","df_A_imput_verde = df_A_verde.copy()\n","df_A_imput_verde.dropna(how='any',inplace=True)\n","#máscara de nubes\n","mask_clouds_verde = df_A_imput_verde['clouds_on_raster'] < 10\n","df_A_clouds_verde = df_A_imput_verde[mask_clouds_verde]\n","#limpieza de outliers\n","df_A_clear_verde = CustomSampler_IQR(df_A_clouds_verde, INDICES_BANDAS)\n","#datos transformados\n","df_A_verde_final = df_A_clear_verde\n"],"metadata":{"id":"DlJ6cAEvwGxx"},"id":"DlJ6cAEvwGxx","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_A_verde_final.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rVJk4jC2rLre","executionInfo":{"status":"ok","timestamp":1659225416636,"user_tz":180,"elapsed":301,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"3b3c0a3f-d585-4d73-dffa-419d189574de"},"id":"rVJk4jC2rLre","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(117795, 15)"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["#Receta A: espacios no verdes\n","#lectura de datos + columnas de interes\n","df_A_no_verde = df_no_verde_initio.copy()\n","#imputación de valores faltantes\n","df_A_imput_no_verde = df_A_no_verde.copy()\n","df_A_imput_no_verde.dropna(how='any',inplace=True)\n","#máscara de nubes\n","mask_clouds_no_verde = df_A_imput_no_verde['clouds_on_raster'] < 10\n","df_A_clouds_no_verde = df_A_imput_no_verde[mask_clouds_no_verde]\n","#limpieza de outliers\n","df_A_clear_no_verde = CustomSampler_IQR(df_A_clouds_no_verde, INDICES_BANDAS)\n","#datos transformados\n","df_A_no_verde_final = df_A_clear_no_verde\n"],"metadata":{"id":"1Hx0RA120AWR"},"id":"1Hx0RA120AWR","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Conjuto de datos listo para implementar, receta A\n","#df = pd.concat([df_A_verde_final, df_A_no_verde_final.drop(['desc'], axis=1)], axis=0, ignore_index= True) \n","df_A = pd.concat([df_A_verde_final, df_A_no_verde_final], axis=0, ignore_index= True) "],"metadata":{"id":"oyYcaeGXwkiz"},"id":"oyYcaeGXwkiz","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df_A['osm_id']=df_A['osm_id'].astype(int)"],"metadata":{"id":"uCohD7OnrUh1","executionInfo":{"status":"error","timestamp":1659224897124,"user_tz":180,"elapsed":286,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"7070dc84-772b-410d-df22-d49f607158a8"},"id":"uCohD7OnrUh1","execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-1b3363501a21>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_A\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'osm_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_A\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'osm_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   5813\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5814\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5815\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5816\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5817\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m     def convert(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_failures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    589\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   1307\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1308\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1309\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1310\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m         \u001b[0;31m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m   1255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1257\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m   1172\u001b[0m         \u001b[0;31m# work around NumPy brokenness, #1987\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1173\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minteger\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1174\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype_intsafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m         \u001b[0;31m# if we have a datetime/timedelta array of objects\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.astype_intsafe\u001b[0;34m()\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: '259-nev'"]}]},{"cell_type":"code","source":["#df_A[['osm_id']].info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JF4SyAcxsbbk","executionInfo":{"status":"ok","timestamp":1659224906462,"user_tz":180,"elapsed":316,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"bfe76acd-79f4-4fa0-c5d8-dfc92149d525"},"id":"JF4SyAcxsbbk","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 170090 entries, 0 to 170089\n","Data columns (total 1 columns):\n"," #   Column  Non-Null Count   Dtype \n","---  ------  --------------   ----- \n"," 0   osm_id  170090 non-null  object\n","dtypes: object(1)\n","memory usage: 1.3+ MB\n"]}]},{"cell_type":"code","source":["df_A.to_csv(\"df_receta_A.csv\", header=True, index=None)"],"metadata":{"id":"tM8PX8ePir9X"},"id":"tM8PX8ePir9X","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Receta B**: Imputacion General + Filtrado Por Nubosidad"],"metadata":{"id":"o2LDXk5I20GD"},"id":"o2LDXk5I20GD"},{"cell_type":"code","source":["#Receta B: espacios verdes\n","#lectura de datos + columnas de interes\n","df_B_verde = df_verde_initio.copy()\n"],"metadata":{"id":"qxpX45kSdi9B"},"id":"qxpX45kSdi9B","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#limpieza de outliers\n","df_B_clear_verde= CustomSampler_IQR(df_B_verde, INDICES_BANDAS)\n","df_B_imput_verde= df_B_clear_verde.copy()\n","#imputación de datos faltantes\n","df_B_imput_verde.fillna(df_B_imput_verde[INDICES_BANDAS].median(), inplace=True)\n","#máscara de nubes\n","mask_clouds_B_verde= df_B_imput_verde['clouds_on_raster'] < 10\n","df_B_clouds_verde= df_B_imput_verde[mask_clouds_B_verde]\n","#datos transformados\n","df_B_verde_final= df_B_clouds_verde\n"],"metadata":{"id":"gPu_Mf1324Wv"},"id":"gPu_Mf1324Wv","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Receta B: espacios no verdes\n","#lectura de datos + columnas de interes\n","df_B_no_verde = df_no_verde_initio.copy()\n","df_B_no_verde['date'] = pd.to_datetime(df_B_no_verde.date, format='%Y/%m/%d')\n","df_B_no_verde['estacion'] = df_B_no_verde.date.map(season_of_date)\n","#limpieza de outliers\n","df_B_clear_no_verde= CustomSampler_IQR(df_B_no_verde, INDICES_BANDAS)\n","df_B_imput_no_verde= df_B_clear_no_verde.copy()\n","#imputación de datos faltantes\n","df_B_imput_no_verde.fillna(df_B_imput_no_verde[INDICES_BANDAS].median(), inplace=True)\n","#máscara de nubes\n","mask_clouds_B_no_verde= df_B_imput_no_verde['clouds_on_raster'] < 10\n","df_B_clouds_no_verde= df_B_imput_no_verde[mask_clouds_B_no_verde]\n","#datos transformados\n","df_B_no_verde_final= df_B_clouds_no_verde"],"metadata":{"id":"XO--I8JX-86B"},"id":"XO--I8JX-86B","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Conjuto de datos listo para implementar, receta B\n","df_B = pd.concat([df_B_verde_final, df_B_no_verde_final], axis=0, ignore_index= True) "],"metadata":{"id":"m41H7Q_aBwQj"},"id":"m41H7Q_aBwQj","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_B.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xXv_7Et4WMEh","executionInfo":{"status":"ok","timestamp":1659225673355,"user_tz":180,"elapsed":17,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"ee4b16d7-a375-41fc-fbdf-5efffb36663d"},"id":"xXv_7Et4WMEh","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ndvi_median          0\n","mNDVI_median         0\n","gari_median          0\n","tcariOsavi_median    0\n","sipi_median          0\n","ndii_median          0\n","B04_median           0\n","B08_median           0\n","B11_median           0\n","raster               0\n","clouds_on_raster     0\n","area_m2              0\n","date                 0\n","target               0\n","estacion             0\n","dtype: int64"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["#df_B['osm_id']=df_B['osm_id'].astype(int)"],"metadata":{"id":"q9ipbocdstnH","colab":{"base_uri":"https://localhost:8080/","height":311},"executionInfo":{"status":"error","timestamp":1659217044415,"user_tz":180,"elapsed":315,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"e1d5f249-d5d8-478c-9840-4a5c5436e072"},"id":"q9ipbocdstnH","execution_count":null,"outputs":[{"output_type":"error","ename":"IntCastingNaNError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIntCastingNaNError\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m<ipython-input-77-1f8f0268adcc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_B\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'osm_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_B\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'osm_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   5813\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5814\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5815\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5816\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5817\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m     def convert(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_failures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    589\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   1307\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1308\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1309\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1310\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m         \u001b[0;31m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m   1255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1257\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m   1166\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1167\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloating\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minteger\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1168\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mastype_float_to_int_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1169\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1170\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_float_to_int_nansafe\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m   1212\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1213\u001b[0m         raise IntCastingNaNError(\n\u001b[0;32m-> 1214\u001b[0;31m             \u001b[0;34m\"Cannot convert non-finite values (NA or inf) to integer\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1215\u001b[0m         )\n\u001b[1;32m   1216\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIntCastingNaNError\u001b[0m: Cannot convert non-finite values (NA or inf) to integer"]}]},{"cell_type":"code","source":["#df_B[['osm_id']].info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rXDdTatIDEfB","executionInfo":{"status":"ok","timestamp":1659217143185,"user_tz":180,"elapsed":288,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"outputId":"a27bf4df-387e-48b9-9b84-2bfcc79ab5fd"},"id":"rXDdTatIDEfB","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 175007 entries, 0 to 175006\n","Data columns (total 1 columns):\n"," #   Column  Non-Null Count   Dtype  \n","---  ------  --------------   -----  \n"," 0   osm_id  120998 non-null  float64\n","dtypes: float64(1)\n","memory usage: 1.3 MB\n"]}]},{"cell_type":"code","source":["df_B.to_csv(\"df_receta_B.csv\", index=None)"],"metadata":{"id":"zgXALlB3jZX1"},"id":"zgXALlB3jZX1","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Receta C**: Imputacion Estacional + Filtrado Por Nubosidad "],"metadata":{"id":"k2az946gB48f"},"id":"k2az946gB48f"},{"cell_type":"code","source":["#Receta C: espacios verdes\n","#lectura de datos + columnas de interes\n","df_C_verde = df_verde_initio.copy()\n"],"metadata":{"id":"jEUvE7nlCNkS"},"id":"jEUvE7nlCNkS","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#filtros por estación\n","mask_v_verde= df_C_verde['estacion'] == 'Verano'\n","mask_o_verde= df_C_verde['estacion'] == 'Otoño'\n","mask_i_verde= df_C_verde['estacion'] == 'Invierno'\n","mask_p_verde= df_C_verde['estacion'] == 'Primavera'"],"metadata":{"id":"YRMRcx5gDK3s"},"id":"YRMRcx5gDK3s","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Limpieza de outliers por estación\n","df_C_list_verde=[df_C_verde[mask_v_verde], df_C_verde[mask_o_verde], df_C_verde[mask_i_verde], df_C_verde[mask_p_verde]]\n","\n","df_C_clear_verde= clear_df_outliers(df_C_list_verde, INDICES_BANDAS)"],"metadata":{"id":"JE91hfU7EeV2"},"id":"JE91hfU7EeV2","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Imputación de valores faltantes por estación\n","lista_df_verde=[df_C_clear_verde[df_C_clear_verde['estacion'] == 'Verano'], df_C_clear_verde[df_C_clear_verde['estacion'] == 'Otoño'], \n","          df_C_clear_verde[df_C_clear_verde['estacion'] == 'Invierno'],df_C_clear_verde[df_C_clear_verde['estacion'] == 'Primavera']]\n","\n","BANDAS= [\"B04_median\", \"B08_median\", \"B11_median\"]\n","\n","INDICES= [\"ndvi_median\", \"mNDVI_median\", \"gari_median\",\"tcariOsavi_median\", \"sipi_median\", \n","                \"ndii_median\"]\n","\n","C_verde_nan_median= imputacion_median_nan(lista_df_verde, INDICES)\n","\n","C_verde_nan_mean= imputacion_mean_nan(lista_df_verde, BANDAS)\n","\n","df_C_imput_verde= pd.concat([C_verde_nan_median, C_verde_nan_mean, df_C_clear_verde[add+['estacion']]], axis=1)"],"metadata":{"id":"EeYrbSfbE5Kr","executionInfo":{"status":"ok","timestamp":1659225715832,"user_tz":180,"elapsed":1014,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cffc7593-2804-4819-9c24-3291b01c8e23"},"id":"EeYrbSfbE5Kr","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n"]}]},{"cell_type":"code","source":["#máscara de nubes\n","mask_40_verde = df_C_imput_verde['clouds_on_raster'] < 40\n","df_C_verde_40 = df_C_imput_verde[mask_40_verde]"],"metadata":{"id":"N61QjL6dHcyo"},"id":"N61QjL6dHcyo","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#datos transformados\n","df_C_verde_final_40 = df_C_verde_40"],"metadata":{"id":"pIx9sjaXHnc7"},"id":"pIx9sjaXHnc7","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Receta C: espacios no verdes\n","#lectura de datos + columnas de interes\n","df_C_no_verde = df_no_verde_initio.copy()\n"],"metadata":{"id":"be0qcUOFJyVl"},"id":"be0qcUOFJyVl","execution_count":null,"outputs":[]},{"cell_type":"code","source":["mask_v_no_verde= df_C_no_verde['estacion'] == 'Verano'\n","mask_o_no_verde= df_C_no_verde['estacion'] == 'Otoño'\n","mask_i_no_verde= df_C_no_verde['estacion'] == 'Invierno'\n","mask_p_no_verde= df_C_no_verde['estacion'] == 'Primavera'"],"metadata":{"id":"E_x2bKveKHNJ"},"id":"E_x2bKveKHNJ","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_C_list_no_verde=[df_C_no_verde[mask_v_no_verde], df_C_no_verde[mask_o_no_verde], df_C_no_verde[mask_i_no_verde], df_C_no_verde[mask_p_no_verde]]\n","\n","df_C_clear_no_verde= clear_df_outliers(df_C_list_no_verde, INDICES_BANDAS)"],"metadata":{"id":"x48Me_RRKROI"},"id":"x48Me_RRKROI","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Imputación de valores faltantes por estación\n","lista_df_no_verde=[df_C_clear_no_verde[df_C_clear_no_verde['estacion'] == 'Verano'], df_C_clear_no_verde[df_C_clear_no_verde['estacion'] == 'Otoño'], \n","          df_C_clear_no_verde[df_C_clear_no_verde['estacion'] == 'Invierno'], df_C_clear_no_verde[df_C_clear_no_verde['estacion'] == 'Primavera']]\n","\n","C_no_verde_nan_median= imputacion_median_nan(lista_df_no_verde, INDICES)\n","\n","C_no_verde_nan_mean= imputacion_mean_nan(lista_df_no_verde, BANDAS)\n","\n","df_C_imput_no_verde= pd.concat([C_no_verde_nan_median, C_no_verde_nan_mean, df_C_clear_no_verde[add+['estacion']]], axis=1)"],"metadata":{"id":"9AEDgseYKilE","executionInfo":{"status":"ok","timestamp":1659225736546,"user_tz":180,"elapsed":901,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bb1f5b89-2428-4a66-c278-6f820e9771a7"},"id":"9AEDgseYKilE","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n"]}]},{"cell_type":"code","source":["#máscara de nubes\n","mask_40_no_verde = df_C_imput_no_verde['clouds_on_raster'] < 40\n","df_C_no_verde_40 = df_C_imput_no_verde[mask_40_no_verde]"],"metadata":{"id":"1ornV-djLD_c"},"id":"1ornV-djLD_c","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#datos transformados\n","df_C_no_verde_final_40 = df_C_no_verde_40"],"metadata":{"id":"Wqe6PUNLLT7G"},"id":"Wqe6PUNLLT7G","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Conjuto de datos listo para implementar, receta C\n","df_C = pd.concat([df_C_verde_final_40, df_C_no_verde_final_40], axis=0, ignore_index= True) "],"metadata":{"id":"EJN3vPkTLKPS"},"id":"EJN3vPkTLKPS","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df_C['osm_id']=df_C['osm_id'].astype(int)"],"metadata":{"id":"FNStygHgs2Cm"},"id":"FNStygHgs2Cm","execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_C.to_csv(\"df_receta_C.csv\", index=None)"],"metadata":{"id":"SxKPEtbCjNYb"},"id":"SxKPEtbCjNYb","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Receta D**: Imputacion Estacional + Filtrado Por Nubosidad + Normalizacion "],"metadata":{"id":"AwQMOWAbNkNh"},"id":"AwQMOWAbNkNh"},{"cell_type":"code","source":["#Receta D: espacios verdes\n","#lectura de datos + columnas de interes\n","df_D_verde = df_verde_initio.copy()\n"],"metadata":{"id":"sN8RzfIbNrAu"},"id":"sN8RzfIbNrAu","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Limpieza de outliers por estación\n","df_D_list_verde=[df_C_verde[mask_v_verde], df_C_verde[mask_o_verde], df_C_verde[mask_i_verde], df_C_verde[mask_p_verde]]\n","\n","df_D_clear_verde= clear_df_outliers(df_C_list_verde, INDICES_BANDAS)"],"metadata":{"id":"Q7mbZoIGOB6R"},"id":"Q7mbZoIGOB6R","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Imputación de valores faltantes por estación\n","listaD_df_verde=[df_D_clear_verde[df_D_clear_verde['estacion'] == 'Verano'], df_D_clear_verde[df_D_clear_verde['estacion'] == 'Otoño'], \n","          df_D_clear_verde[df_D_clear_verde['estacion'] == 'Invierno'],df_D_clear_verde[df_D_clear_verde['estacion'] == 'Primavera']]\n","\n","D_verde_nan_median= imputacion_median_nan(listaD_df_verde, INDICES)\n","\n","D_verde_nan_mean= imputacion_mean_nan(listaD_df_verde, BANDAS)\n","\n","df_D_imput_verde= pd.concat([D_verde_nan_median, D_verde_nan_mean, df_D_clear_verde[add+['estacion']]], axis=1)"],"metadata":{"id":"UfiNKmPMOVW2","executionInfo":{"status":"ok","timestamp":1659225769597,"user_tz":180,"elapsed":852,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f2a3dc20-8030-48d0-9fd3-ea65d20819b5"},"id":"UfiNKmPMOVW2","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n"]}]},{"cell_type":"code","source":["#Filtrado por nubosidad\n","df_D_verde_cloud_40= df_D_imput_verde[df_D_imput_verde['clouds_on_raster'] < 40]"],"metadata":{"id":"RNYs0_fnPC1-"},"id":"RNYs0_fnPC1-","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Normalización\n","from sklearn.preprocessing import RobustScaler\n","\n","transformer = RobustScaler()\n","\n","lista_df_D_verde_cloud=[df_D_verde_cloud_40[df_D_verde_cloud_40['estacion'] == 'Verano'], \n","                        df_D_verde_cloud_40[df_D_verde_cloud_40['estacion'] == 'Otoño'], \n","                        df_D_verde_cloud_40[df_D_verde_cloud_40['estacion'] == 'Invierno'], \n","                        df_D_verde_cloud_40[df_D_verde_cloud_40['estacion'] == 'Primavera']]\n","\n","lista_df_D_verde_cloud[0].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_verde_cloud[0][INDICES_BANDAS]) #transformacion para registros en verano\n","\n","lista_df_D_verde_cloud[1].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_verde_cloud[1][INDICES_BANDAS]) #transformacion para registros en otoño\n","\n","lista_df_D_verde_cloud[2].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_verde_cloud[2][INDICES_BANDAS]) #transformacion para registros en invierno\n","\n","lista_df_D_verde_cloud[3].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_verde_cloud[3][INDICES_BANDAS]) #transformacion para registros en otoño\n","\n"],"metadata":{"id":"gHqOWx-YPQmB","executionInfo":{"status":"ok","timestamp":1659225784423,"user_tz":180,"elapsed":719,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6b544e1e-dae7-4f61-c81c-b0a6276d0b0a"},"id":"gHqOWx-YPQmB","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n"]}]},{"cell_type":"code","source":["#datos transformados\n","df_D_final_verde= pd.concat([lista_df_D_verde_cloud[0], lista_df_D_verde_cloud[1], lista_df_D_verde_cloud[2], lista_df_D_verde_cloud[3]], axis=0)"],"metadata":{"id":"rd69eZwbQZ0H"},"id":"rd69eZwbQZ0H","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Receta D: espacios no verdes\n","#lectura de datos + columnas de interes\n","df_D_no_verde = df_no_verde_initio.copy()\n"],"metadata":{"id":"RijEx0OqQqu4"},"id":"RijEx0OqQqu4","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Limpieza de outliers por estación\n","df_D_list_no_verde=[df_C_no_verde[mask_v_no_verde], df_C_no_verde[mask_o_no_verde], df_C_no_verde[mask_i_no_verde], df_C_no_verde[mask_p_no_verde]]\n","\n","df_D_clear_no_verde= clear_df_outliers(df_C_list_no_verde, INDICES_BANDAS)"],"metadata":{"id":"VWjQnPgrQ9bW"},"id":"VWjQnPgrQ9bW","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Imputación de valores faltantes por estación\n","listaD_df_no_verde=[df_D_clear_no_verde[df_D_clear_no_verde['estacion'] == 'Verano'], \n","                    df_D_clear_no_verde[df_D_clear_no_verde['estacion'] == 'Otoño'], \n","                    df_D_clear_no_verde[df_D_clear_no_verde['estacion'] == 'Invierno'],\n","                    df_D_clear_no_verde[df_D_clear_no_verde['estacion'] == 'Primavera']]\n","\n","D_no_verde_nan_median= imputacion_median_nan(listaD_df_no_verde, INDICES)\n","\n","D_no_verde_nan_mean= imputacion_mean_nan(listaD_df_no_verde, BANDAS)\n","\n","df_D_imput_no_verde= pd.concat([D_no_verde_nan_median, D_no_verde_nan_mean, df_D_clear_no_verde[add+['estacion']]], axis=1)"],"metadata":{"id":"QrttZyExSCrZ","executionInfo":{"status":"ok","timestamp":1659225794995,"user_tz":180,"elapsed":558,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8e33530c-a506-4f94-bc92-bb2c689ebda3"},"id":"QrttZyExSCrZ","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n"]}]},{"cell_type":"code","source":["#Filtrado por nubosidad\n","df_D_no_verde_cloud_40= df_D_imput_no_verde[df_D_imput_no_verde['clouds_on_raster'] < 40]"],"metadata":{"id":"O7xpbu6WS2N9"},"id":"O7xpbu6WS2N9","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Normalización\n","lista_df_D_no_verde_cloud=[df_D_no_verde_cloud_40[df_D_no_verde_cloud_40['estacion'] == 'Verano'], \n","                        df_D_no_verde_cloud_40[df_D_no_verde_cloud_40['estacion'] == 'Otoño'], \n","                        df_D_no_verde_cloud_40[df_D_no_verde_cloud_40['estacion'] == 'Invierno'], \n","                        df_D_no_verde_cloud_40[df_D_no_verde_cloud_40['estacion'] == 'Primavera']]\n","\n","lista_df_D_no_verde_cloud[0].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_no_verde_cloud[0][INDICES_BANDAS]) #transformacion para registros en verano\n","\n","lista_df_D_no_verde_cloud[1].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_no_verde_cloud[1][INDICES_BANDAS]) #transformacion para registros en otoño\n","\n","lista_df_D_no_verde_cloud[2].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_no_verde_cloud[2][INDICES_BANDAS]) #transformacion para registros en invierno\n","\n","lista_df_D_no_verde_cloud[3].loc[:,INDICES_BANDAS] = transformer.fit_transform(lista_df_D_no_verde_cloud[3][INDICES_BANDAS]) #transformacion para registros en otoño\n"],"metadata":{"id":"5QkxvRYeSlpy","executionInfo":{"status":"ok","timestamp":1659225803401,"user_tz":180,"elapsed":303,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ed785916-9666-44d3-b4e6-929338b5b1c4"},"id":"5QkxvRYeSlpy","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1835: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(loc, value[:, i].tolist(), pi)\n"]}]},{"cell_type":"code","source":["#datos transformados\n","df_D_final_no_verde= pd.concat([lista_df_D_no_verde_cloud[0], lista_df_D_no_verde_cloud[1], lista_df_D_no_verde_cloud[2], lista_df_D_no_verde_cloud[3]], axis=0)"],"metadata":{"id":"KWjKEV8KTXJk"},"id":"KWjKEV8KTXJk","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Conjuto de datos listo para implementar, receta D\n","df_D = pd.concat([df_D_final_verde, df_D_final_no_verde], axis=0, ignore_index= True) "],"metadata":{"id":"rxD7K0apTk8E"},"id":"rxD7K0apTk8E","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df_D['osm_id']=df_D['osm_id'].astype(int)"],"metadata":{"id":"c0P5gIEjtCwd","executionInfo":{"status":"error","timestamp":1659216906536,"user_tz":180,"elapsed":367,"user":{"displayName":"Maria Virginia Romero Messein","userId":"04549912530995320606"}},"colab":{"base_uri":"https://localhost:8080/","height":311},"outputId":"4639d689-b8d6-4e58-95de-d73cfdaa4b5d"},"id":"c0P5gIEjtCwd","execution_count":null,"outputs":[{"output_type":"error","ename":"IntCastingNaNError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIntCastingNaNError\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m<ipython-input-75-a3a60807cbfc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_D\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'osm_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_D\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'osm_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   5813\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5814\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5815\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5816\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5817\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m     def convert(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_failures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    589\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   1307\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1308\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1309\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1310\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m         \u001b[0;31m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m   1255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1257\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m   1166\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1167\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloating\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minteger\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1168\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mastype_float_to_int_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1169\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1170\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_float_to_int_nansafe\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m   1212\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1213\u001b[0m         raise IntCastingNaNError(\n\u001b[0;32m-> 1214\u001b[0;31m             \u001b[0;34m\"Cannot convert non-finite values (NA or inf) to integer\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1215\u001b[0m         )\n\u001b[1;32m   1216\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIntCastingNaNError\u001b[0m: Cannot convert non-finite values (NA or inf) to integer"]}]},{"cell_type":"code","source":["df_D.to_csv(\"df_receta_D.csv\", index=None)"],"metadata":{"id":"g_7WDTKTjzqM"},"id":"g_7WDTKTjzqM","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"colab":{"name":"30 Julio. Parte_1_Recetas-MEV-TP_Aprendizaje_Supervisado.ipynb","provenance":[{"file_id":"1pIkPBmQHD1CdtSgaj4mEyC_IiJCvENBX","timestamp":1659216279979},{"file_id":"1WvoELIhtPBSKU8K2ZE-FUS1Vuj0bv_eG","timestamp":1659117976514},{"file_id":"https://github.com/felixlapalma/monitoreo-espacios-verdes-diplo202X/blob/main/notebooks-tp/Aprendizaje_Supervisado_MEV_TP.ipynb","timestamp":1658155085997}],"collapsed_sections":[]}},"nbformat":4,"nbformat_minor":5}